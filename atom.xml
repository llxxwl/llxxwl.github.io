<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lpower</title>
  
  
  <link href="http://lpower.com/atom.xml" rel="self"/>
  
  <link href="http://lpower.com/"/>
  <updated>2021-11-24T09:09:53.631Z</updated>
  <id>http://lpower.com/</id>
  
  <author>
    <name>lpower</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>七牛云批量压缩打包文件</title>
    <link href="http://lpower.com/2021/11/24/%E4%B8%83%E7%89%9B%E4%BA%91%E6%89%B9%E9%87%8F%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E6%96%87%E4%BB%B6/"/>
    <id>http://lpower.com/2021/11/24/%E4%B8%83%E7%89%9B%E4%BA%91%E6%89%B9%E9%87%8F%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E6%96%87%E4%BB%B6/</id>
    <published>2021-11-24T07:06:58.000Z</published>
    <updated>2021-11-24T09:09:53.631Z</updated>
    
    <content type="html"><![CDATA[<p><a name="Bp16D"></a></p><h4 id="记录总共有多少文件需要打包"><a href="#记录总共有多少文件需要打包" class="headerlink" title="记录总共有多少文件需要打包"></a>记录总共有多少文件需要打包</h4><a id="more"></a><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缓存作品数</span></span><br><span class="line">$redis = \Yii::$app-&gt;redis;</span><br><span class="line">$redis-&gt;set(<span class="string">'count'</span> . $id, $count);</span><br><span class="line">$redis-&gt;expire(<span class="string">'count'</span> . $id, <span class="number">86400</span>);</span><br></pre></td></tr></tbody></table></figure><p><a name="Rrk0G"></a></p><h4 id="视频文件从vod下载到七牛云"><a href="#视频文件从vod下载到七牛云" class="headerlink" title="视频文件从vod下载到七牛云"></a>视频文件从vod下载到七牛云</h4><ol><li>首先需要视频在vod的标识vid，根据vid来获取播放地址。获取播放地址的api在阿里云的文档里写的很清楚，详情见<a href="https://help.aliyun.com/document_detail/56124.htm?spm=a2c4g.11186623.0.0.59c55000NIGnPI#doc-api-vod-GetPlayInfo" target="_blank" rel="noopener">api文档</a>，sdk示例见<a href="https://help.aliyun.com/document_detail/61070.html" target="_blank" rel="noopener">sdk文档</a></li><li><p>区分高清和标清</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据清晰度下载到七牛云</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($info-&gt;PlayInfoList-&gt;PlayInfo)) {</span><br><span class="line">$playInfo = $info-&gt;PlayInfoList-&gt;PlayInfo;</span><br><span class="line"><span class="keyword">foreach</span> ($playInfo <span class="keyword">as</span> $item) {</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'FD'</span> == $item-&gt;Definition) {</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"标清"</span>;</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'LD'</span> == $item-&gt;Definition) {</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"高清"</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>记录下载失败数据</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$redis = \Yii::$app-&gt;redis;</span><br><span class="line"><span class="comment">// 需要打包文件数减1</span></span><br><span class="line">$redis-&gt;decr(<span class="string">'count'</span> . <span class="keyword">$this</span>-&gt;id);</span><br><span class="line"><span class="comment">// 记录失败的详细数据。 这里最好用数据的标识，以便之后的查询</span></span><br><span class="line">$redis-&gt;sadd(<span class="string">'failDownLoad'</span>, <span class="string">'标识'</span>);</span><br><span class="line"><span class="comment">// 设置过期时间</span></span><br><span class="line">$redis-&gt;expire(<span class="string">'failDownLoad'</span>, <span class="number">86400</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>视频文件（url）下载到七牛云，采用的是<a href="https://developer.qiniu.com/kodo/4097/asynch-fetch" target="_blank" rel="noopener">异步第三方文件抓取</a>方式</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadSourceToQiniu</span><span class="params">($id, $creationId, $fileUrl, $bucket = <span class="string">''</span>, $moduleId = <span class="number">1</span>)</span> </span>{</span><br><span class="line"><span class="comment">// 地址转换</span></span><br><span class="line">  $key = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span> (strpos($fileUrl, <span class="string">'.com/'</span>)) {</span><br><span class="line"><span class="keyword">list</span>($domain, $key) = explode(<span class="string">'.com/'</span>, $fileUrl);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (strpos($fileUrl, <span class="string">'.cn/'</span>)) {</span><br><span class="line"><span class="keyword">list</span>($domain, $key) = explode(<span class="string">'.cn/'</span>, $fileUrl);</span><br><span class="line">}</span><br><span class="line">$fileKey = $key;</span><br><span class="line"><span class="comment">// 作品信息</span></span><br><span class="line">$redis = \Yii::$app-&gt;redis;</span><br><span class="line">$key = <span class="string">'download'</span> . $id;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($creation)) {</span><br><span class="line">$title = $creation[<span class="string">'title'</span>] ?? <span class="string">''</span>;</span><br><span class="line">$name = !<span class="keyword">empty</span>($creation[<span class="string">'author_name'</span>]) ? $creation[<span class="string">'author_name'</span>] : (!<span class="keyword">empty</span>($creation[<span class="string">'user_name'</span>]) ? $creation[<span class="string">'user_name'</span>] : $creation[<span class="string">'user_nick'</span>]);</span><br><span class="line">$redis-&gt;sadd($key, $fileKey . <span class="string">'*'</span> . $creation[<span class="string">'number'</span>] . <span class="string">'*'</span> . $title . <span class="string">'*'</span> . $name . <span class="string">'*'</span> . $moduleId);</span><br><span class="line">$redis-&gt;expire($key, <span class="number">86400</span>);</span><br><span class="line">}</span><br><span class="line">$scheme = <span class="string">"http://"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;config-&gt;useHTTPS === <span class="keyword">true</span>) {</span><br><span class="line">$scheme = <span class="string">"https://"</span>;</span><br><span class="line">}</span><br><span class="line">$apiUrl = $scheme . <span class="keyword">$this</span>-&gt;apiHost. <span class="string">'/sisyphus/fetch'</span>;</span><br><span class="line">  <span class="comment">// 回调函数</span></span><br><span class="line">  $callbackurl = <span class="keyword">$this</span>-&gt;callback ?? <span class="string">''</span>;</span><br><span class="line"><span class="comment">/*如果不指定储存，则用默认储存*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($bucket)) {</span><br><span class="line">$bucket = <span class="keyword">$this</span>-&gt;bucket;</span><br><span class="line">}</span><br><span class="line">$count = $redis-&gt;get(<span class="string">'count'</span> . $id);</span><br><span class="line">  <span class="comment">// 这里所有的参数都可以在回调函数中拿到</span></span><br><span class="line">$body = json_encode([<span class="string">'url'</span> =&gt; $fileUrl, <span class="string">'bucket'</span> =&gt; $bucket, <span class="string">'key'</span> =&gt; $fileKey, <span class="string">'callbackurl'</span> =&gt; $callbackurl, <span class="string">'callbackbody'</span> =&gt; <span class="string">'key=$(key)&amp;hash=$(etag)&amp;size=$(fsize)&amp;h=$(imageInfo.height)&amp;moduleId='</span>. $moduleId . <span class="string">'&amp;id='</span>.$id . <span class="string">'&amp;creationId='</span> . $creationId . <span class="string">'&amp;count='</span> . $count]);</span><br><span class="line">$headers = <span class="keyword">$this</span>-&gt;auth-&gt;authorizationV2($apiUrl, <span class="string">'POST'</span>, $body, <span class="string">'application/json'</span>);</span><br><span class="line">$headers[<span class="string">"Content-Type"</span>] = <span class="string">'application/json'</span>;</span><br><span class="line">$headers[<span class="string">"Host"</span>] = <span class="keyword">$this</span>-&gt;apiHost;</span><br><span class="line">$response = Client::post($apiUrl, $body, $headers);</span><br><span class="line"><span class="keyword">if</span> (!$response-&gt;ok()) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(<span class="keyword">null</span>, <span class="keyword">new</span> Error($apiUrl, $response));</span><br><span class="line">}</span><br><span class="line">$r = $response-&gt;json();</span><br><span class="line"><span class="comment">// 新建一个hash表做计数用，用来判断下载到七牛云的资源是否已经全部完成</span></span><br><span class="line">$redis-&gt;hmset($id, $fileKey . $creationId, $r[<span class="string">'id'</span>]);</span><br><span class="line">$redis-&gt;expire($id, <span class="number">86400</span>);</span><br><span class="line"><span class="keyword">return</span> $r;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>回调函数<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionOssDownloadcallback</span><span class="params">()</span> </span>{</span><br><span class="line">$qiniuInfo = \Yii::$app-&gt;params[<span class="string">'qiniu'</span>];</span><br><span class="line">$post = \Yii::$app-&gt;request-&gt;post();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($post[<span class="string">'key'</span>]) &amp;&amp; !<span class="keyword">empty</span>($post[<span class="string">'id'</span>])) {</span><br><span class="line">$key = $post[<span class="string">'key'</span>];</span><br><span class="line">$id = $post[<span class="string">'id'</span>];</span><br><span class="line">$creationId = $post[<span class="string">'creationId'</span>];</span><br><span class="line">$count = $post[<span class="string">'count'</span>];</span><br><span class="line">$redis = \Yii::$app-&gt;redis;</span><br><span class="line">$len = $redis-&gt;hlen($id);</span><br><span class="line"><span class="comment">// 如果哈希表为空，代表文件全部下载完成，到压缩程序</span></span><br><span class="line"><span class="keyword">if</span> ((int)$count == $len) {</span><br><span class="line">$redis-&gt;del($id, <span class="string">'count'</span> . $id);</span><br><span class="line"><span class="comment">// 数据表里改变下载状态为正在下载中</span></span><br><span class="line">$qiniu = <span class="keyword">new</span> Qiniu($qiniuInfo);</span><br><span class="line">      <span class="comment">// 压缩打包回调函数</span></span><br><span class="line">$callback = $qiniuInfo[<span class="string">'callbackUrl'</span>]. <span class="string">'v1/oss/fopdownload'</span>;</span><br><span class="line">      <span class="comment">// 压缩打包函数</span></span><br><span class="line">$qiniu-&gt;fopDownload($id, $creationId, $callback);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> $qiniuInfo[<span class="string">'httpUrl'</span>];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p><a name="YDF6S"></a></p><h4 id="将所有下载好的文件打包，打包文档（大量文件压缩，mode-4）"><a href="#将所有下载好的文件打包，打包文档（大量文件压缩，mode-4）" class="headerlink" title="将所有下载好的文件打包，打包文档（大量文件压缩，mode=4）"></a>将所有下载好的文件打包，<a href="https://developer.qiniu.com/dora/1667/mkzip" target="_blank" rel="noopener">打包文档</a>（大量文件压缩，mode=4）</h4><ol><li>拼接索引文件：用之前存在redis的数据查询索引文件所需要的信息，拼接成字符串</li><li><p>以二进制流的形式上传到七牛云上，<a href="https://developer.qiniu.com/kodo/1241/php" target="_blank" rel="noopener">SDK文档</a></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadIndexFile</span><span class="params">($index, $filename, $bucket)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// 上传索引文件到七牛云</span></span><br><span class="line">        $qiniuInfo = \Yii::$app-&gt;params[<span class="string">'qiniu'</span>];</span><br><span class="line">        $auth = <span class="keyword">new</span> Auth($qiniuInfo[<span class="string">'accessKey'</span>], $qiniuInfo[<span class="string">'secretKey'</span>]);</span><br><span class="line">  <span class="comment">// 生成上传Token</span></span><br><span class="line">        $token = $auth-&gt;uploadToken($bucket, $filename);</span><br><span class="line">  <span class="comment">// 构建UploadManager对象</span></span><br><span class="line">        $uploadMgr = <span class="keyword">new</span> UploadManager();</span><br><span class="line">        <span class="keyword">list</span>($ret, $err) = $uploadMgr-&gt;put($token, $filename, $index);</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'result'</span> =&gt; $ret, <span class="string">'err'</span> =&gt; $err];</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></li><li><p>压缩文件</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fopDownload</span><span class="params">($id, $creationId, $notifyUrl = <span class="string">''</span>, $bucket = <span class="string">''</span>, $pipLine = <span class="string">''</span>, $force = false)</span> </span>{</span><br><span class="line"><span class="comment">//        $fileInfo = $this-&gt;getFileWithoutExt($fileKey);</span></span><br><span class="line"><span class="comment">/*如果不指定储存，则用默认储存*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($bucket)) {</span><br><span class="line">$bucket = <span class="keyword">$this</span>-&gt;bucket;</span><br><span class="line">}</span><br><span class="line">$redis = \Yii::$app-&gt;redis;</span><br><span class="line"><span class="comment">// 下载失败文件记录</span></span><br><span class="line">$fails = $redis-&gt;smembers(<span class="string">'failDownLoad'</span> . $id);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($fails)) {</span><br><span class="line">$records = <span class="string">'未下载成功文件有：'</span>;</span><br><span class="line"><span class="comment">// 这里拼接未下载成功提示</span></span><br><span class="line">    ...</span><br><span class="line">$failName = <span class="string">"下载失败数据详情.txt"</span>;</span><br><span class="line">$failFile = <span class="keyword">$this</span>-&gt;uploadIndexFile($records, $failName, $bucket);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 构建索引文件</span></span><br><span class="line">$members = $redis-&gt;smembers(<span class="string">'download'</span> . $id);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($members)) {</span><br><span class="line"><span class="comment">// 这里构建索引文件</span></span><br><span class="line">    ...</span><br><span class="line">      </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($failFile[<span class="string">'result'</span>][<span class="string">'key'</span>])) {</span><br><span class="line">      <span class="comment">// 这里url要base64转码，详情见压缩文档</span></span><br><span class="line">$index .= <span class="string">'url/'</span> . base64_urlSafeEncode(<span class="keyword">$this</span>-&gt;httpUrl . $failFile[<span class="string">'result'</span>][<span class="string">'key'</span>]);</span><br><span class="line"><span class="comment">// 删除缓存</span></span><br><span class="line">$redis-&gt;del(<span class="string">'failDownLoad'</span> . $id);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($actInfo)) {</span><br><span class="line">      <span class="comment">// 索引文件命名</span></span><br><span class="line">$filename = $actInfo[<span class="string">'user_id'</span>] . <span class="string">'_'</span> . $actInfo[<span class="string">'act_id'</span>]  .<span class="string">'_'</span> . $actInfo[<span class="string">'id'</span>] . <span class="string">'.txt'</span>;</span><br><span class="line">$file = <span class="keyword">$this</span>-&gt;uploadIndexFile($index, $filename, $bucket);</span><br><span class="line"><span class="keyword">if</span> (!is_null($file[<span class="string">'result'</span>])) {</span><br><span class="line">$fileKey = $file[<span class="string">'result'</span>][<span class="string">'key'</span>];</span><br><span class="line"><span class="comment">/*如果不指定队列，则用默认队列*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($pipLine)) {</span><br><span class="line">    $pipLine = <span class="keyword">$this</span>-&gt;pipLine;</span><br><span class="line"> }</span><br><span class="line"><span class="comment">/*实例化*/</span></span><br><span class="line">$pfop = <span class="keyword">new</span> PersistentFop(<span class="keyword">$this</span>-&gt;auth, <span class="keyword">$this</span>-&gt;config);</span><br><span class="line">$fops = <span class="string">"mkzip/4/|saveas/"</span> . base64_urlSafeEncode($bucket . <span class="string">':'</span> . $id . <span class="string">'/'</span> . $actInfo[<span class="string">'title'</span>] . <span class="string">'-附件集合'</span> . <span class="string">'.zip'</span>);</span><br><span class="line"><span class="keyword">list</span>($ret, $err) = $pfop-&gt;execute($bucket, $fileKey, $fops, $pipLine, $notifyUrl, $force);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> [<span class="string">'err'</span> =&gt; $err, <span class="string">'result'</span> =&gt; $ret];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>回调函数</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionFopdownload</span><span class="params">()</span> </span>{</span><br><span class="line">$qiniuInfo = \Yii::$app-&gt;params[<span class="string">'qiniu'</span>];</span><br><span class="line">$post = \Yii::$app-&gt;request-&gt;post();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($post[<span class="string">'id'</span>])) {</span><br><span class="line">$id = $post[<span class="string">'id'</span>];</span><br><span class="line">$auth = <span class="keyword">new</span> Auth($qiniuInfo[<span class="string">'accessKey'</span>], $qiniuInfo[<span class="string">'secretKey'</span>]);</span><br><span class="line">$config = <span class="keyword">new</span> Config();</span><br><span class="line">    <span class="comment">// 返回持久化id</span></span><br><span class="line">$pfop = <span class="keyword">new</span> PersistentFop($auth, $config);</span><br><span class="line"><span class="keyword">list</span>($ret, $err) = $pfop-&gt;status($id);</span><br><span class="line"><span class="keyword">if</span> (!is_null($ret)) {</span><br><span class="line"><span class="comment">// 更改数据表状态为下载完成</span></span><br><span class="line">      ...</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> $qiniuInfo[<span class="string">'httpUrl'</span>];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p><a name="UmV5G"></a></p><h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><ol><li>上面涉及到七牛云的过程几乎都会用到持久化数据处理。持久化用于满足数据处理时间较长、计算量较大的场景，并且可以随时获取处理进度信息。在资源处理时，自动触发</li><li>文档地址：<a href="https://developer.qiniu.com/dora/1291/persistent-data-processing-pfop" target="_blank" rel="noopener">https://developer.qiniu.com/dora/1291/persistent-data-processing-pfop</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a name=&quot;Bp16D&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;记录总共有多少文件需要打包&quot;&gt;&lt;a href=&quot;#记录总共有多少文件需要打包&quot; class=&quot;headerlink&quot; title=&quot;记录总共有多少文件需要打包&quot;&gt;&lt;/a&gt;记录总共有多少文件需要打包&lt;/h4&gt;</summary>
    
    
    
    <category term="PHP" scheme="http://lpower.com/categories/PHP/"/>
    
    
    <category term="代码" scheme="http://lpower.com/tags/代码/"/>
    
  </entry>
  
  <entry>
    <title>supervisor</title>
    <link href="http://lpower.com/2021/08/03/supervisor/"/>
    <id>http://lpower.com/2021/08/03/supervisor/</id>
    <published>2021-08-03T11:38:06.000Z</published>
    <updated>2021-08-03T11:40:40.313Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Supervisor是一个客户/服务器系统，可以在类unix系统中管理控制大量进程。使用python开发。<br><a id="more"></a></p><ul><li>服务器端：supervisord，主要负责在启动自身时启动管理的子进程，响应客户端的命令，重启崩溃或退出的子进程，记录子进程stdout和stderr输出，生成和处理子进程生命周期中的事件。可以在一个配置文件中配置相关参数，包括supervisor的自身的状态，其管理的各个子进程的相关属性。配置文件一般位于/etc/supervisord.conf</li><li>客户端：supervisorctl，它提供了一个类shell的接口（即命令行）来使用supervisord服务端提供的功能。通过客户端，用户可以连接到supervisord服务器进程，获得服务器进程控制的子进程的状态，启动和停止子进程，获得正在运行的进程列表，客户端通过Unix域套接字或者TCP套接字与服务端进行通信，服务端具有身份凭证认证机制，可以有效提升安全性。当客户端和服务器位于同一台机器上时，客户端和服务器共用同一个配置文件，通过标签来区分两者的配置</li></ul><h4 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h4><ol><li>Ubuntu下安装：<code>sudo apt-get install supervisor</code>。</li><li><p>配置：安装成功后，会在/etc/supervisor目录下，生成supervisord.conf配置文件。也可以使用<code>echo_supervisord_conf &gt; supervisord.conf</code>命令生成默认配置文件</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">配置文件实例：</span><br><span class="line">; 带;的是注释行</span><br><span class="line">; supervisor config file</span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file=/var/run/supervisor.sock   ; (the path to the socket file)</span><br><span class="line">chmod=0700                       ; sockef file mode (default 0700)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)</span><br><span class="line">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">childlogdir=/var/log/supervisor            ; ('AUTO' child log dir, default $TEMP)</span><br><span class="line"></span><br><span class="line">; the below section must remain in the config file for RPC</span><br><span class="line">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them in separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket</span><br><span class="line"></span><br><span class="line">; The [include] section can just contain the "files" setting.  This</span><br><span class="line">; setting can list multiple files (separated by whitespace or</span><br><span class="line">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class="line">; interpreted as relative to this file.  Included files *cannot*</span><br><span class="line">; include files themselves.</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></tbody></table></figure><p> 进程配置会读取/etc/supervisor/conf.d目录下的配置文件。xx.conf如下</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[program:xx] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作</span><br><span class="line">process_name=%(program_name)s_%(process_num)02d</span><br><span class="line">command=/opt/remi/php73/root/usr/bin/php program/artisan queue:work --sleep=3 --tries=3  // 执行的命令</span><br><span class="line">autostart=true     ; 在 supervisord 启动的时候也自动启动</span><br><span class="line">autorestart=true   ; 程序异常退出后自动重启</span><br><span class="line">user=root          ; 用哪个用户启动</span><br><span class="line">numprocs=3</span><br><span class="line">redirect_stderr=true  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class="line">stdout_logfile=/data/logs/xx.log      ; log文件</span><br><span class="line">stopwaitsecs=3600</span><br></pre></td></tr></tbody></table></figure></li><li><p>启动：<code>supervisord</code></p></li><li>常用命令： <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl stop program_name停止某个进程</span><br><span class="line">supervisorctl start program_name启动某个进程</span><br><span class="line">supervisorctl restart program_name重启某个进程</span><br><span class="line">supervisorctl stop all停止全部进程</span><br><span class="line">supervisorctl reload载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</span><br><span class="line">supervisorctl update根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;Supervisor是一个客户/服务器系统，可以在类unix系统中管理控制大量进程。使用python开发。&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="守护进程" scheme="http://lpower.com/categories/守护进程/"/>
    
    
    <category term="linux" scheme="http://lpower.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>PHP面试</title>
    <link href="http://lpower.com/2020/03/17/PHP%E9%9D%A2%E8%AF%95/"/>
    <id>http://lpower.com/2020/03/17/PHP%E9%9D%A2%E8%AF%95/</id>
    <published>2020-03-17T01:04:34.000Z</published>
    <updated>2021-08-03T11:36:05.823Z</updated>
    
    <content type="html"><![CDATA[<h4 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h4><p>  自我介绍是一个很重要的环节，一个好的自我介绍，会让面试官眼前一亮，有继续了解你的欲望<br>  <a id="more"></a></p><h4 id="PHP基础"><a href="#PHP基础" class="headerlink" title="PHP基础"></a>PHP基础</h4><pre><code>1. 什么是面向对象：面向对象编程是软件开发方法，可以提高软件的重用性、灵活性和扩展性。包括类（定义了一件事物的抽象特点）与对象（类的实例），优势在于类的复用2. 面向对象的三大特性    2.1 封装：只有特定类的对象可以访问这一特定类的成员，信息隐藏，将类的使用和实现分开，避免耦合    2.2 继承：一个类会有子类，子类会继承父类的属性和行为，增加了代码的可重用性    2.3 多态：一个类实例的相同方法在不同情形有不同的表现形式，增强了软件的灵活性，确切的含义是：同一类的对象收到相同消息时，会得到不同的结果。而这个消息是不可预测的3. PHP基础函数    3.1 操作数组的函数        array_pop 删除数组中最后一个函数        array_merge  合并数组        array_push   向数组中添加元素        sort      数组排序        count     数组计数        array_search    查找数组中元素        array_unique    去重        array_shift     删除数组中首个元素        array_unshift   插入首个元素    3.2 操作字符串的函数    <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">trim  去除特殊字符</span><br><span class="line">explode    分割字符串</span><br><span class="line">implode    合成字符串</span><br><span class="line">strrev     字符串反转</span><br><span class="line">strpos     字符串检索</span><br><span class="line">strcmp     字符串比较</span><br><span class="line">strlen     字符串长度</span><br></pre></td></tr></tbody></table></figure>[完整的字符串和数组函数](http://note.youdao.com/noteshare?id=84d22d5db2c27508804867c9228f1259)4. 面向对象设计五大原则    4.1 开放封闭原则(osp)一个模块在扩展性方面是开放的，在更改性方面是封闭的。核心思想就是对抽象编程。能够提高系统的可扩展性和可维护性    4.2 单一职责原则(srp)可以减少类之间的耦合，提高代码复用性。适配工厂模式、命令模式    4.3 里氏替换原则(lsp)子类型必须能够替换掉他们的父类型、并出现在父类能够出现的任何地方    4.4 依赖倒置原则(dip)上层模块不应该依赖于下层模块，他们共同依赖于一个抽象；抽象不能依赖于具体，具体应该依赖于抽象    4.5 接口隔离原则(isp)5. 魔术方法(以两个下划线__开头，具有特殊作用的方法)    5.1 __construct  构造函数，实例化对象时被调用    5.2 __set和__get函数：是两个比较重要的魔术方法，这两个方法被归类到重载，动态的创建类属性和方法。作用是当给对象属性赋值或者取值时，即使这个属性不存在，也不会报错，一定程度上增强了程序的健壮性    5.3 __call和__callStatic方法：和上面的两个魔术方法一样，也是PHP的重载。当调用一个不可访问的方法(如未定义或不可见)时，__call方法会被调用。作用是防止调用不存在的方法而出错。    5.4 toString和debugInfo方法：格式化输出这个对象所包含的数据。tostring=》print_r   debuginfo=》var_dump 6. 命名空间：命名空间是一种封装事务的方法。在PHP中，命名空间用来解决在创建可重用的代码时碰到的两类问题：    1) 用户编写的代码与PHP内部的类/函数/常量或第三方类之间的名字冲突    2) 为很长的标识符名称创建一个别名，提高代码的可读性7. 自动加载：PHP5.1.2之后，提供了自动加载类的方法----spl_autoload_register。有了这个方法，我们就不用每个文件都去加载了8. 接口：接口常用来作为类与类之间的一个“协议”，接口是抽象类的变体，接口中所有方法都是抽象的，接口为抽象而生。在程序里，接口的所有方法都必须被全部实现，否则会报fetal错误9. PHP中的错误级别：    deprecated是最低级别的错误，表示不推荐，不建议    notice一般是语法存在不当的地方，如未定义的变量等，不影响PHP正常流程    warning是级别比较高的错误，一般在语法中有很不恰当的地方才会触发，比如函数参数不匹配，这类错误会得不到预期结果    fetal error是致命错误，会导致PHP流程终结    最高级别的错误是语法解析错误prase error，语法错误，导致PHP无法通过语法检查10. echo，print，print_r的区别    print和echo是语言结构，echo可以输出多个值，无返回值；print只能输出一个值，有返回值，都能输出整形和字符串，没法打印bool型。print_r除了输出整形和字符串，还可以输出数组和对象11. 按值传递和按引用传递的区别    按值传递：在函数内部的修改在函数外部都会被忽略    按引用传递：在函数内部的修改在函数外部也会反映12. PHP的垃圾回收机制    PHP的变量存储在变量容器zval中，zval中除了存储变量类型和值外，还有is_ref和refcount字段。Refcount表示指向变量的元素个数，is_ref表示变量是否有别名。如果refcount为0时，就回收该变量容器。如果一个zval的refcount-1之后大于0，他就会进入垃圾缓冲区。当缓冲区达到最大值后，回收算法会循环遍历zval，判断其是否为垃圾，并进行释放处理</code></pre><h4 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h4><pre><code>1. osi七层模型    应用层：FTP、DNS、HTTP、SMTP    表示层    会话层    传输层：TCP、UDP    网络层：IP、ARP    数据链路层    物理层2. HTTP协议：HTTP协议是一个应用层协议，由请求和响应构成，是一个标准的客户端和服务器模型。默认的HTTP端口是80，https的端口是4433. 常见状态码    200 OK：客户端请求成功    301 Moved Permanently：表客户请求的文档被移动到其他地方，新的url在location头中给出    400 客户端请求有语法错误    401 请求未经授权    403 服务器收到请求，但拒绝提供服务    404 请求资源不存在，例如输入了错误的URL    451 由于当前地区法律原因而不可用    500 服务器发生不可预期的错误    503 服务器当前不能处理客户端的请求，一段时间后恢复正常4. Cookie    Cookie在远程浏览器端存储数据并以此跟踪和识别用户的机制。从实现上说，Cookie是存储在客户端的一小段数据，浏览器通过HTTP协议和服务器端进行cookie交互。cookie通常用于存储一些不是很敏感的信息，或者是进行登陆控制，也可用来记住用户名、记住免密码登录，防止刷票等5. Session    Session即会话，指一种持续性的、双向的连接。针对Web网站来说，session指用户在浏览某个网站时，从进入网站到浏览器关闭这段时间内的会话。PHP的Session默认通过文件的方式实现</code></pre>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;自我介绍&quot;&gt;&lt;a href=&quot;#自我介绍&quot; class=&quot;headerlink&quot; title=&quot;自我介绍&quot;&gt;&lt;/a&gt;自我介绍&lt;/h4&gt;&lt;p&gt;  自我介绍是一个很重要的环节，一个好的自我介绍，会让面试官眼前一亮，有继续了解你的欲望&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://lpower.com/2019/11/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lpower.com/2019/11/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-11-17T09:52:51.000Z</published>
    <updated>2021-08-03T11:33:31.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><a id="more"></a><p><a name="KzZfi"></a></p><h4 id="五大原则（SOLID）"><a href="#五大原则（SOLID）" class="headerlink" title="五大原则（SOLID）"></a>五大原则（SOLID）</h4><ol><li>单一职责原则（SRP）：一个类只应承担一种责任</li><li>开放-封闭原则（OCP）：实体可扩展，不可修改。面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码</li><li>里氏替换原则（LSP）：一个对象在其出现的任何地方，都可以用子类实例做替换，并且不会导致程序的错误</li><li>接口分离原则（ISP）：一个类实现的接口中，包含了它不需要的方法。将接口拆分成更小的和更具体的接口，有助于解耦。从而更容易重构、解耦</li><li>依赖倒置原则（DIP）：高层次的模块不应该依赖低层次的模块、他们都应该依赖于抽象。抽象不应该依赖于具体实现，具体实现应依赖抽象。针对接口编程，不要对实现编程</li><li>迪米特法则（Lod）：如果两个类不彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过这个第三者转发这个调用。在类的结构设计上，每一个类都应当尽量降低成员的访问权限<br><a name="C51Ia"></a><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4></li></ol><ul><li>又称静态工厂方法。专门定义一个类来负责其他类的实例，被创建的实例通常都具有共同的父类<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//简单工厂模式</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">protected</span> $a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> $b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setA</span><span class="params">($a)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = $a;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setB</span><span class="params">($b)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = $b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        $res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span> <span class="keyword">extends</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;a + <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationMul</span> <span class="keyword">extends</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;a * <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationSub</span> <span class="keyword">extends</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;a - <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationDiv</span> <span class="keyword">extends</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;b == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"被除数不能为0"</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;a / <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationFactory</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createOpreation</span><span class="params">($operation)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">switch</span> ($operation) {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                $oper = <span class="keyword">new</span> OperationAdd();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                $oper = <span class="keyword">new</span> OperationSub();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                $oper = <span class="keyword">new</span> OperationMul();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                $oper = <span class="keyword">new</span> OperationDiv();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $oper;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">$operation = OperationFactory::createOpreation(<span class="string">'+'</span>);</span><br><span class="line">$operation-&gt;setA(<span class="number">1</span>);</span><br><span class="line">$operation-&gt;setB(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">echo</span> $operation-&gt;getResult() . PHP_EOL;</span><br></pre></td></tr></tbody></table></figure></li></ul><p><a name="1S1KT"></a></p><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><ul><li>保证一个类只有一个实例，并提供一个访问它的全局访问点。让类自身负责保存它的唯一实例。这个类可以保证没有其它实例可以被创建，并且他可以提供一个访问该实例的方法。</li><li>可以严格地控制客户怎样访问以及何时访问他。简单地说就是对唯一实例的受控访问</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//单例模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">static</span>::$instance == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">static</span>::$instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::$instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">$s1 = Singleton::getInstance();</span><br><span class="line">$s2 = Singleton::getInstance();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($s1 == $s2) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'same class'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a name="LOSHJ"></a></p><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><ul><li>定义一个用于创建对象的接口，让子类决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类</li><li>实现时，客户端需要决定实例化哪一个工厂来实现运算类，选择判断的问题还是存在的，也就是说，工厂方法把简单工厂的内部逻辑判断移动到了客户端代码执行，如果要添加功能，本来应该修改工厂类，现在是修改客户端</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂方法模式</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">protected</span> $a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> $b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setA</span><span class="params">($a)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = $a;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setB</span><span class="params">($b)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = $b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        $res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span> <span class="keyword">extends</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;a + <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationMul</span> <span class="keyword">extends</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;a * <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationSub</span> <span class="keyword">extends</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;a - <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationDiv</span> <span class="keyword">extends</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;b == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"被除数不能为0"</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;a / <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Ifactory</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateOperation</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddFactory</span> <span class="keyword">implements</span> <span class="title">Ifactory</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateOperation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OperationAdd();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateOperation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OperationSub();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MulFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateOperation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OperationMul();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DivFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateOperation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OperationDiv();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line">$operationFactory = <span class="keyword">new</span> AddFactory();</span><br><span class="line">$operation = $operationFactory-&gt;CreateOperation();</span><br><span class="line">$operation-&gt;setA(<span class="number">10</span>);</span><br><span class="line">$operation-&gt;setB(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> $operation-&gt;getResult().<span class="string">"\n"</span>;</span><br></pre></td></tr></tbody></table></figure><p><a name="wTewm"></a></p><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><ul><li>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</li><li>所有在用简单工厂的地方，都可以考虑用反射技术来去除switch或if，解除分支判断代码的耦合</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//抽象工厂模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">private</span> $id = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setId</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id = $id;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $name = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Department</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">private</span> $id = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setId</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id = $id;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $name = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUser</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">(User $user)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span><span class="params">($id)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlserverUser</span> <span class="keyword">implements</span> <span class="title">IUser</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">(User $user)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"往SQL Server中的User表添加一条记录\n"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"根据id得到SQL Server中User表一条记录\n"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccessUser</span> <span class="keyword">implements</span> <span class="title">IUser</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">(User $user)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"往Access Server中的User表添加一条记录\n"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"根据id得到Access Server中User表一条记录\n"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单工厂替换抽象工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataBase</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">const</span> DB = <span class="string">'Access'</span>;</span><br><span class="line">    <span class="comment">// private $db = 'Access';</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateUser</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        $class = <span class="keyword">static</span>::DB . <span class="string">'User'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> $class();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateDepartment</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        $class = <span class="keyword">static</span>::DB . <span class="string">'Department'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> $class();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IDepartment</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">(Department $user)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDepartment</span><span class="params">($id)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlserverDepartment</span> <span class="keyword">implements</span> <span class="title">IDepartment</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">(Department $department)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"往SQL Server中的Department表添加一条记录\n"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDepartment</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"根据id得到SQL Server中Department表一条记录\n"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccessDepartment</span> <span class="keyword">implements</span> <span class="title">IDepartment</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">(Department $department)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"往Access Server中的Department表添加一条记录\n"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDepartment</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"根据id得到Access Server中Department表一条记录\n"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//改为简单工厂后的客户端代码</span></span><br><span class="line">$user = <span class="keyword">new</span> User();</span><br><span class="line">$iu = DataBase::CreateUser();</span><br><span class="line">$iu-&gt;insert($user);</span><br><span class="line">$iu-&gt;getUser(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">$department = <span class="keyword">new</span> Department();</span><br><span class="line">$id = DataBase::CreateDepartment();</span><br><span class="line">$id-&gt;insert($department);</span><br><span class="line">$id-&gt;getDepartment(<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><p><a name="UhYFD"></a></p><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><ul><li>定义了一种多对多的依赖关系，让多个观察者对象同时监听某一个主体对象。当一个对象的状态发生改变时，所有依赖他的对象都得到通知并自动刷新</li><li>符合接口隔离原则，实现了对象之间的松耦合</li><li>抽象主题（subject）：他把所有的观察者对象的引用保存到一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象</li><li>具体主题（concretesubject）：将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发通知</li><li>抽象观察者（observer）：为所有的具体观察者定义一个接口，在得到主题通知时更新自己</li><li>具体观察者（concreteobserver）：实现抽象观察者角色所需要的更新接口，以便使本身的状态与主题状态协调</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//观察者模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象主题：提供一个接口，增加和删除对象</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">private</span> $observers = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span><span class="params">(Observer $observer)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        array_push(<span class="keyword">$this</span>-&gt;observers, $observer);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detatch</span><span class="params">($observer)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;observers <span class="keyword">as</span> $key =&gt; $value) {</span><br><span class="line">            <span class="keyword">if</span> ($observer === $value) {</span><br><span class="line">                <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;observers[$key]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;observers <span class="keyword">as</span> $observer) {</span><br><span class="line">            $observer-&gt;update();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象观察者，为所有的具体观察者定义一个接口，在得到主题是更新自己</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">observer</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体主题，发生改变时，给所有登记过的观察者发出通知</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">private</span> $subjectState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setState</span><span class="params">($state)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;subjectState = $state;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getState</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;subjectState;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体观察者：实现抽象观察者角色所要求的的更新接口，以便使本身的状态与主体状态协调</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $subject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(ConcreteSubject $subject, $name)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;subject = $subject;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"观察者 "</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">"的新状态是:"</span> . <span class="keyword">$this</span>-&gt;subject-&gt;getState() . <span class="string">"\n"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">$s = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">$s-&gt;attach(<span class="keyword">new</span> ConcreteObserver($s, <span class="string">"x"</span>));</span><br><span class="line">$s-&gt;attach(<span class="keyword">new</span> ConcreteObserver($s, <span class="string">"y"</span>));</span><br><span class="line">$z = <span class="keyword">new</span> ConcreteObserver($s, <span class="string">"z"</span>);</span><br><span class="line">$s-&gt;attach($z);</span><br><span class="line">$s-&gt;detatch($z);</span><br><span class="line">$s-&gt;setState(<span class="string">'ABC'</span>);</span><br><span class="line">$s-&gt;notify();</span><br></pre></td></tr></tbody></table></figure><p><a name="0ESIO"></a></p><h4 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h4><ul><li>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变算法的节结构即可重定义该算法的某些特定步骤</li><li>既然用了继承，并且肯定这个继承有意义，就应该要成为子类的模板，所有重复的代码都应该要上升到父类去，而不是让每个子类去重复。当我们要完成某一细节层次一致的一个过程或一系列步骤，但其中个别的步骤在更详细的层次上的实现可能不同时，我们通常考虑用模板方法模式</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// 对甲乙两名同学所抄试卷，尽量将相同的部分提到父类</span></span><br><span class="line"><span class="comment">// 金庸小说考题试卷</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPaper</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">TestQuestion1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"杨过说过，后来给了郭靖，炼成倚天剑、屠龙刀的玄铁可能是［］a.球磨铸铁 b.马口铁 c.高速合金钢 d.碳素纤维 \n"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"答案 "</span>.<span class="keyword">$this</span>-&gt;answer1().<span class="string">"\n"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">TestQuestion2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"杨过、程英、陆无双铲除了情花，造成［］a.使这种植物不在害人 b.使一种珍惜物种灭绝 c.破坏了那个生态圈的生态平衡 d.造成该地区沙漠化 \n"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"答案 "</span>.<span class="keyword">$this</span>-&gt;answer2().<span class="string">"\n"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">TestQuestion3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"蓝凤凰致使华山师徒、桃谷六仙呕吐不止，如果你是大夫，会给他们开什么药［］a.阿司匹林 b.牛黄解毒片 c.氟哌酸 d.让他们喝大量的生牛奶 e.以上全不对 \n"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"答案 "</span>.<span class="keyword">$this</span>-&gt;answer3().<span class="string">"\n"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生甲抄的试卷</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPaperA</span> <span class="keyword">extends</span> <span class="title">TestPaper</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'a'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'b'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'c'</span>;</span><br><span class="line">    } </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生乙抄的试卷</span></span><br><span class="line"><span class="comment">// 学生甲抄的试卷</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPaperB</span> <span class="keyword">extends</span> <span class="title">TestPaper</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'d'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'c'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">answer3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'a'</span>;</span><br><span class="line">    } </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"学生甲抄的试卷: \n"</span>;</span><br><span class="line">$student = <span class="keyword">new</span> TestPaperA();</span><br><span class="line">$student-&gt;TestQuestion1();</span><br><span class="line">$student-&gt;TestQuestion2();</span><br><span class="line">$student-&gt;TestQuestion3();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"学生乙抄的试卷: \n"</span>;</span><br><span class="line">$student2 = <span class="keyword">new</span> TestPaperB();</span><br><span class="line">$student2-&gt;TestQuestion1();</span><br><span class="line">$student2-&gt;TestQuestion2();</span><br><span class="line">$student2-&gt;TestQuestion3();</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;</summary>
    
    
    
    <category term="PHP" scheme="http://lpower.com/categories/PHP/"/>
    
    
    <category term="设计模式" scheme="http://lpower.com/tags/设计模式/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://lpower.com/2019/08/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://lpower.com/2019/08/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2019-08-14T09:14:10.000Z</published>
    <updated>2021-08-03T11:33:31.685Z</updated>
    
    <content type="html"><![CDATA[<h5 id="正则表达式是学习PHP的基础之一"><a href="#正则表达式是学习PHP的基础之一" class="headerlink" title="正则表达式是学习PHP的基础之一"></a>正则表达式是学习PHP的基础之一</h5><a id="more"></a><ol><li>元字符</li></ol><table><thead><tr><th style="text-align:center">元字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:center">匹配任意单个字符除了换行符</td></tr><tr><td style="text-align:center">[]</td><td style="text-align:center">匹配方括号内的任意字符</td></tr><tr><td style="text-align:center">[^]</td><td style="text-align:center">否定的字符种类，匹配除了方括号里的任意字符</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">匹配&gt;=0个重复的*号之前的字符</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">匹配&gt;=1个重复的+号之前的字符</td></tr><tr><td style="text-align:center">？</td><td style="text-align:center">标记？之前的字符为可选</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">从开始行开始匹配</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">从末端开始匹配</td></tr></tbody></table><ol start="2"><li>{}号</li></ol><p>在正则表达式中{}是一个量词，常用来一个或一组字符可以重复出现的次数。例如，表达式[0-9]{2,3}匹配最少2位最多3位0-9的数字</p><ol start="3"><li>(…)特征标群</li></ol><p>特征标群是一组写在(…)中的子模式。例如，表达式(ab)*匹配连续出现0或更多个ab</p><ol start="4"><li>简写字符集</li></ol><table><thead><tr><th style="text-align:center">简写</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:center">除换行符外的所有字符</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配所有字母数字</td></tr><tr><td style="text-align:center">\W</td><td style="text-align:center">匹配所有非字母数字</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配数字</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">匹配非数字</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配所有空格字符，等同于：[\t\n\f\r\p{Z}]</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">匹配所有非空格字符</td></tr><tr><td style="text-align:center">\f</td><td style="text-align:center">匹配一个换页符</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">匹配一个换行符</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">匹配一个回车符</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">匹配一个制表符</td></tr><tr><td style="text-align:center">\v</td><td style="text-align:center">匹配一个垂直制表符</td></tr><tr><td style="text-align:center">\p</td><td style="text-align:center">匹配 CR/LF (等同于 \r\n)，用来匹配 DOS 行终止符</td></tr></tbody></table><ol start="5"><li>标志</li></ol><p>标志也叫模式修正符，因为它可以用来修改表达式的搜索结果</p><table><thead><tr><th style="text-align:center">标志</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">i</td><td style="text-align:left">忽略大小写</td></tr><tr><td style="text-align:center">g</td><td style="text-align:left">全局搜索</td></tr><tr><td style="text-align:center">m</td><td style="text-align:left">多行的: 锚点元字符 ^ $ 工作范围在每行的起始</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;正则表达式是学习PHP的基础之一&quot;&gt;&lt;a href=&quot;#正则表达式是学习PHP的基础之一&quot; class=&quot;headerlink&quot; title=&quot;正则表达式是学习PHP的基础之一&quot;&gt;&lt;/a&gt;正则表达式是学习PHP的基础之一&lt;/h5&gt;</summary>
    
    
    
    <category term="正则" scheme="http://lpower.com/categories/正则/"/>
    
    
    <category term="正则" scheme="http://lpower.com/tags/正则/"/>
    
  </entry>
  
  <entry>
    <title>java笔记</title>
    <link href="http://lpower.com/2019/07/16/java%E7%AC%94%E8%AE%B0/"/>
    <id>http://lpower.com/2019/07/16/java%E7%AC%94%E8%AE%B0/</id>
    <published>2019-07-16T03:53:17.000Z</published>
    <updated>2021-08-03T11:33:31.631Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java是一门面向对象编程语言。一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。"><a href="#Java是一门面向对象编程语言。一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。" class="headerlink" title="Java是一门面向对象编程语言。一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。"></a>Java是一门面向对象编程语言。一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。</h4><a id="more"></a><ol><li>基本语法</li></ol><ul><li>大小写敏感</li><li>类名首字母大写，如果类名由多个单词组成，那么每个单词的首字母应该大写</li><li>所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写</li><li>原文件名必须和类名相同</li><li>所有的Java程序由public static void main(String []args)方法开始执行</li></ul><ol start="2"><li>Java标识符(Java所有的组成部分都需要名字。类名、变量名及方法名都被称为标识符)</li></ol><ul><li>所有的标识符都应该以字母，$，或者下划线开始</li><li>首字符以后可以是字母，美元符，下划线或数字的任何字符组合</li><li>关键字不能做标识符</li><li>标识符大小写敏感</li></ul><ol start="3"><li>Java增强for循环</li></ol><ul><li>Java5引入了一种主要用于数组的增强型for循环，语法格式如下：<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(声明语句:表达式)</span><br><span class="line">{</span><br><span class="line">    //代码句子</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p><p>表达式：表达式是要访问的数组名，或者是返回值为数组的方法</p><h4 id="Spring-Boot-约定优于配置"><a href="#Spring-Boot-约定优于配置" class="headerlink" title="Spring Boot   约定优于配置"></a>Spring Boot   约定优于配置</h4><ol><li>优点</li></ol><ul><li>创建独立的spring应用程序</li><li>嵌入的Tomcat、Jetty或者Undertow，无需部署WAR文件</li><li>允许通过Maven来根据需要获取starter</li><li>尽可能的自动配置Spring</li><li>提供生产就绪型功能，如指标、健康检查和外部配置</li><li>绝对没有代码生成，对XML没有要求配置</li></ul><ol start="2"><li>IOC （Inversion of Control）  控制反转容器</li></ol><ul><li>是Spring的核心，是一种通过描述来获取或者生成对象的技术</li><li>功能<ul><li>通过描述管理Bean，包括发布和获取Bean    （在Spring中把每一个需要管理的对象称为Bean）</li><li>通过描述完成Bean之间的依赖关系</li></ul></li></ul><ol start="3"><li><p>注解</p><ol><li><p>@ComponentScan 扫描当前类所在的包和子包</p><ul><li>@Filter的类型及意义  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ANNOTATION:注解类型</span><br><span class="line">ASSIGNABLE_TYPE:ANNOTATION:指定的类型</span><br><span class="line">REGEX:按照正则表达式</span><br><span class="line">CUSTOM:i定义规则</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>@Configurable  表示是Java的配置文件</p></li><li>@Bean 将此方法返回的 POJO 装配到 IoC 容器中，而其属性 name 定义这个 Bean 的名称，如果没有配置它，则将方法名称作为 Bean 的名称保存到 Spring IoC 容器中 。</li><li>@SpringBootApplication 是一个复合注解，包括@ComponentScan，和@SpringBootConfiguration，@EnableAutoConfiguration</li><li>@Component    //表明这个类将被 Spring IoC 容器扫描装配</li><li>@Autowired    //根据属性的类型（by type）找到对应的 Bean 进行注入，＠Autowired 提供这样的规则， 首先它会根据类型找到对应的 Bean, 如果对应类型的 Bean 不是唯一的，那么它会根据其属性名称和 Bean 的名称进行匹配。如果匹配得上，就会使用该 Bean：如果还无法匹配，就会抛出异常。 </li><li>@Primary   //消除歧义性，修改优先权</li><li>＠Quelifier  与＠Autowired 组合在一起，通过类型和名称一起找到 Bean</li><li>@Override  重写，验证下面的方法名是否是你父类中所有的</li><li>@Conditional 只有在特定条件满足时才启用一些配置</li><li>@ImportResource ，通过它可以引入对应的 XML 文件，用以加载Bean</li><li>＠Aspect  当以此为注解时，spring就会知道这是一个切面，然后我们就可以通过各类注解来定义各类的通知了</li><li>＠Repository  在将来讨论扫描加载MyBatis接口Bean时是十分有用的</li><li>@Responsebody 该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用</li></ol></li><li><p>DI （Dependency Injection） 依赖注入</p><pre><code>例如，人类（ Person ）有时候利用一些动物 (Animal）去完成一些事情，比方说狗（Dog）是用来看门的，猫（Cat）是用来抓老鼠的， 鹦鹉（Paηot)是用来迎客的……于是做一些事情就依赖于那些可爱的动物了</code></pre></li><li>生命周期<br> <img src="/2019/07/16/java笔记/1.png" alt><br> 生命周期：<br> <img src="/2019/07/16/java笔记/2.png" alt></li><li>约定编程<br> <img src="/2019/07/16/java笔记/3.png" alt><br> AOP（面向切面编程）可以解决对数据库事务的管控问题，还可以减少大量重复的工作。使用Spring AOP可以处理一些无法使用 OOP 实现的业务逻辑。其次，通过约定，可以将一些业务逻辑织入流程中，并且可以将一些通用的逻辑抽取出来，然后给予默认实现，这样你只需要完成部分的功能就可以了，这样做可以使得开发者的代码更加简短，同时可维护性也得到提高。</li><li><p>JPA（Hibernate）操作数据</p><p> Java持久化API，是定义了对象关系映射（ORM）以及实体对象持久化的标准接口。JPA所维护的核心是实体，而它是通过持久化上下文来使用的。持久化上下文包含以下三个部分：</p><ul><li>对象关系映射，主要通过注解实现</li><li>实体操作API，实现对实体对象的CRUD操作，来完成对象的持久化和查询</li><li>查询语言，约定了面向对象的查询语言JPQL，通过这层关系可以实现比较灵活地查询</li></ul></li><li>MyBatis<ul><li>定义：MyBatis是支持定制化SQL、存储过程以及高级映射的优秀的持久层框架。 MyBatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的XML或注解，将接口和Java的POJO ( Plain Old Java O均ect，普通的 Java 对象）映射成数据库中的记录。 </li><li>配置内容<ul><li>properties（属性）</li><li>settings（设置）：改变Mybatis的底层行为</li><li>typeAliases（别名）</li><li>typeHandles（类型处理器）：是重要配置之一，在写入和读取数据库的过程中对于不同类型的数据进行自定义转换</li><li>plugins(插件)：也称拦截器，是最强大也是最危险的组件。通过动态代理和责任链模式完成，可以修改底层上的实现功能</li></ul><ul><li>mappers（映射器）是最核心的组件，提供SQL和POJO的映射关系，是Mybatis开发的核心</li></ul></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;Java是一门面向对象编程语言。一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。&quot;&gt;&lt;a href=&quot;#Java是一门面向对象编程语言。一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。&quot; class=&quot;headerlink&quot; title=&quot;Java是一门面向对象编程语言。一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。&quot;&gt;&lt;/a&gt;Java是一门面向对象编程语言。一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。&lt;/h4&gt;</summary>
    
    
    
    <category term="Java" scheme="http://lpower.com/categories/Java/"/>
    
    
    <category term="Java基础" scheme="http://lpower.com/tags/Java基础/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu16.04下搭建lnmp</title>
    <link href="http://lpower.com/2019/06/12/ubuntu16-04-%E4%B8%8B%E6%90%AD%E5%BB%BAlnmp/"/>
    <id>http://lpower.com/2019/06/12/ubuntu16-04-%E4%B8%8B%E6%90%AD%E5%BB%BAlnmp/</id>
    <published>2019-06-12T05:39:35.000Z</published>
    <updated>2021-08-03T11:33:31.682Z</updated>
    
    <content type="html"><![CDATA[<h4 id="记一次Linux下搭建lnmp环境走过的坑"><a href="#记一次Linux下搭建lnmp环境走过的坑" class="headerlink" title="记一次Linux下搭建lnmp环境走过的坑"></a>记一次Linux下搭建lnmp环境走过的坑</h4><a id="more"></a><ol><li>更新源<br><code>sudo apt-get update</code></li><li><p>安装nginx</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br><span class="line">sudo service nginx start  //开启nginx服务</span><br><span class="line">systemctl status nginx  //查看nignx状态</span><br></pre></td></tr></tbody></table></figure><p> 在浏览器输入127.0.0.1，出现如下界面，说明已经安装成功</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/12/ubuntu16-04-下搭建lnmp/nginx.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p></p></li><li><p>安装php7.1与php7.1-fpm</p><p> 直接运行<code>sudo apt-get</code>命令安装PHP会报错，原因是 PHP7 等并不在 Ubuntu的软件库中，因此要使用 PPA ppa:ondrej/php 库，所以需要运行如下命令：</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-add-repository ppa:ondrej/php</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install php7.1 php7.1-fpm</span><br></pre></td></tr></tbody></table></figure><p> 安装完成后运行<code>php -v</code>命令查看php版本，确定php安装完成</p></li><li><p>安装MySQL及PHP-MySQL扩展</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server mysql-client php7.1-mysql</span><br></pre></td></tr></tbody></table></figure><p> 安装过程中会需要输入MySQL的密码，输入自己想要设置的密码即可。安装完成后，运行<code>systemctl start mysql</code>开启MySQL服务</p></li><li><p>Nginx 与 PHP-FPM集成</p><ul><li><p>修改nginx配置文件</p><p>  nginx配置文件在/etc/nginx/sites-available/default 配置文件中（网站根目录也在是这里更改）,nginx已经默认与php-fpm集成好了，只需修改以下配置即可</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root   /var/www/html    //网站默认根目录</span><br><span class="line">index index.php index.html index.htm index.nginx-debian.html;//默认文件</span><br><span class="line">location ~ \.php$ {</span><br><span class="line">            include snippets/fastcgi-php.conf;</span><br><span class="line">    #       # With php7.0-cgi alone:</span><br><span class="line">    #       fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">    #       # With php7.0-fpm:</span><br><span class="line">            fastcgi_pass unix:/run/php/php7.1-fpm.sock;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>  配置完成后，保存退出。运行<code>nginx -t</code>命令检测配置文件是否有错误。我在检测的时候遇到了一个错误</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/12/ubuntu16-04-下搭建lnmp/error.png" alt title>                </div>                <div class="image-caption"></div>            </figure>这种情况是80端口被占用，此时我们可以输入<code>lsof -i :80</code>命令来查看80端口的pid，然后<code>kill pid号</code>将进程关闭，再运行<code>nginx -t</code>，如果出现<br>  <img src="/2019/06/12/ubuntu16-04-下搭建lnmp/ok.png" alt><p></p><p>  证明配置完成，再重新载入nginx配置（<code>nginx -s reload</code>）</p></li></ul></li><li>完成搭建<ul><li>改完配置文件后，重新启动nginx服务<code>systemctl start nginx</code>,此时可能会报错，查看nginx状态<code>systemctl status nginx</code>，会发现出现下列情况<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/12/ubuntu16-04-下搭建lnmp/502.png" alt title>                </div>                <div class="image-caption"></div>            </figure>  这个错误还是端口80被占用，用上述方法再修复一次即可。</li><li>启动php-fpm服务 <code>systemctl start php7.1-fpm</code></li><li><code>sudo echo '&lt;?php echo phpinfo();'  &gt; /var/www/html/test.php</code>运行此命令，将test.php存放到网站根目录下，访问<code>127.0.0.1/test.php</code>，如果成功，会出现  <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/12/ubuntu16-04-下搭建lnmp/success.png" alt title>                </div>                <div class="image-caption"></div>            </figure>.但是注意，这里还会有一个坑，访问这个页面之后可能会出现502的情况，如果出现502，应该就是nginx配置文件出错<pre><code>location ~ \.php$ {                include snippets/fastcgi-php.conf;        #       # With php7.0-cgi alone:        #       fastcgi_pass 127.0.0.1:9000;        #       # With php7.0-fpm:                fastcgi_pass unix:/run/php/php7.1-fpm.sock;    }</code></pre>  仔细看这个配置文件最后一行，php的版本一定要与自己系统里的php版本一样，如果是7.2，就要改为7.2，否则就会出现502错误。改完以后，重新载入配置，启动服务，在测试一遍，就会成功。 </li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;记一次Linux下搭建lnmp环境走过的坑&quot;&gt;&lt;a href=&quot;#记一次Linux下搭建lnmp环境走过的坑&quot; class=&quot;headerlink&quot; title=&quot;记一次Linux下搭建lnmp环境走过的坑&quot;&gt;&lt;/a&gt;记一次Linux下搭建lnmp环境走过的坑&lt;/h4&gt;</summary>
    
    
    
    <category term="PHP" scheme="http://lpower.com/categories/PHP/"/>
    
    
    <category term="环境搭建" scheme="http://lpower.com/tags/环境搭建/"/>
    
  </entry>
  
  <entry>
    <title>phpdbg</title>
    <link href="http://lpower.com/2019/06/10/phpdbg/"/>
    <id>http://lpower.com/2019/06/10/phpdbg/</id>
    <published>2019-06-10T05:35:50.000Z</published>
    <updated>2021-08-03T11:33:31.650Z</updated>
    
    <content type="html"><![CDATA[<h4 id="phpdbg是一个PHP的SAPI模块，可以在不用修改代码和不影响性能的情况下控制PHP的运行环境"><a href="#phpdbg是一个PHP的SAPI模块，可以在不用修改代码和不影响性能的情况下控制PHP的运行环境" class="headerlink" title="phpdbg是一个PHP的SAPI模块，可以在不用修改代码和不影响性能的情况下控制PHP的运行环境"></a>phpdbg是一个PHP的SAPI模块，可以在不用修改代码和不影响性能的情况下控制PHP的运行环境</h4><a id="more"></a><h4 id="phpdbg的目标是成为一个轻量级，强大，易用的PHP调试平台。可以在PHP5-4及以上版本使用，在PHP5-6及以上版本已经内置"><a href="#phpdbg的目标是成为一个轻量级，强大，易用的PHP调试平台。可以在PHP5-4及以上版本使用，在PHP5-6及以上版本已经内置" class="headerlink" title="phpdbg的目标是成为一个轻量级，强大，易用的PHP调试平台。可以在PHP5.4及以上版本使用，在PHP5.6及以上版本已经内置"></a>phpdbg的目标是成为一个轻量级，强大，易用的PHP调试平台。可以在PHP5.4及以上版本使用，在PHP5.6及以上版本已经内置</h4><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>以下面的代码为例：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function test($a,$b){</span><br><span class="line">    $c = $a + $b;</span><br><span class="line">    return $c;</span><br><span class="line">}</span><br><span class="line">$i = 1;</span><br><span class="line">$j = 2;</span><br><span class="line">echo test($i,$j),PHP_EOL;</span><br><span class="line">$name = '白菜';</span><br><span class="line">class TestClass{</span><br><span class="line">    public function printSth($a){</span><br><span class="line">        echo $a.'----';</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">$test = new TestClass();</span><br><span class="line">$test-&gt;printSth('123');</span><br></pre></td></tr></tbody></table></figure><p></p><ol><li>如果想要加载要调试的脚本，只需执行exec命令即可，如下：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/10/phpdbg/debug/exec.png" alt title>                </div>                <div class="image-caption"></div>            </figure>显示successful即成功。当然我们也可以在启动的时候指定e参数：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/10/phpdbg/debug/e.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p>设置断点</p><ul><li><p>按opline设置断点：这里所说的opline，就是以方法入口作为起点，当前所在代码的行号。在上面的示例中，第三行的’$c = $a + $b;’的opline就是1.<br><img src="/2019/06/10/phpdbg/debug/break.png" alt></p><p>  执行：<br><img src="/2019/06/10/phpdbg/debug/run.png" alt>可以看到断点执行情况</p></li><li>按方法设置断点<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/10/phpdbg/debug/1.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>按行数设置断点<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/10/phpdbg/debug/2.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul></li><li>查看断点<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/10/phpdbg/debug/info.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>info break的显示结果中会把断点的类型也给显示出来。#后面的数字是断点号，我们可以根据断点号删除断点</li><li>删除断点<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/10/phpdbg/debug/del.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>单步执行<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/10/phpdbg/debug/step.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>phpdbg的单步执行只有一个命令 step。是一行一行的执行代码。</li><li><p>继续执行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/10/phpdbg/debug/c.png" alt title>                </div>                <div class="image-caption"></div>            </figure>continue继续执行代码，简写为c<p></p></li><li><p>查看代码 </p><p> <img src="/2019/06/10/phpdbg/debug/list.png" alt></p><p> list命令显示test函数的代码</p></li><li>查看opcode<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/10/phpdbg/debug/op.png" alt title>                </div>                <div class="image-caption"></div>            </figure>print 命令查看opcode</li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;phpdbg是一个PHP的SAPI模块，可以在不用修改代码和不影响性能的情况下控制PHP的运行环境&quot;&gt;&lt;a href=&quot;#phpdbg是一个PHP的SAPI模块，可以在不用修改代码和不影响性能的情况下控制PHP的运行环境&quot; class=&quot;headerlink&quot; title=&quot;phpdbg是一个PHP的SAPI模块，可以在不用修改代码和不影响性能的情况下控制PHP的运行环境&quot;&gt;&lt;/a&gt;phpdbg是一个PHP的SAPI模块，可以在不用修改代码和不影响性能的情况下控制PHP的运行环境&lt;/h4&gt;</summary>
    
    
    
    <category term="PHP" scheme="http://lpower.com/categories/PHP/"/>
    
    
    <category term="调试" scheme="http://lpower.com/tags/调试/"/>
    
  </entry>
  
  <entry>
    <title>redis命令</title>
    <link href="http://lpower.com/2019/04/20/redis%E5%91%BD%E4%BB%A4/"/>
    <id>http://lpower.com/2019/04/20/redis%E5%91%BD%E4%BB%A4/</id>
    <published>2019-04-20T08:10:55.000Z</published>
    <updated>2021-08-03T11:33:31.636Z</updated>
    
    <content type="html"><![CDATA[<h4 id="redis常用命令"><a href="#redis常用命令" class="headerlink" title="redis常用命令"></a>redis常用命令</h4><a id="more"></a><ol><li>redis键<ol><li>del key //删除key</li><li>dump key //序列化给定key，并返回被序列化的值</li><li>exists key //检查key是否存在</li><li>expire key seconds/timestamp  //设置过期时间，以秒/Unix时间戳计</li><li>keys pattern   //查找所有符合给定模式的key</li><li>move key DB   //将当前数据库的key移动到给定的数据库db当中</li><li>persist key   //移除key的过期时间，key将持久保持</li><li>rename key newkey   //修改key的名称</li></ol></li></ol><ol start="2"><li><p>字符串</p><ol><li>set key value    //设置指定key的值</li><li>get key       //获取指定key的值</li><li>getrance key start end    //返回key中字符串值的子字符</li><li>getset key value   //将给定的值设为value，并返回key的旧值</li><li>getbit key offset  //对key所储存的字符串值，获取指定偏移量上的位</li><li>mget key1 //获取所有给定的值</li><li>strlen key    //返回key所储存的字符串值的长度</li><li>mset key value   //同时设置一个或多个key-value对</li><li>append key value  //如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。</li></ol></li><li><p>哈希 Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><ol><li>hmset key value    //创建一个哈希表</li><li>hdel key field1 [field2]  //删除一个或多个哈希表字段</li><li>hexists key field   //查看哈希表中指定的字段是否存在</li><li>hget key field   //获取在哈希表中指定key的所有字段和值</li><li>hincrby key field increment  //为key中的指定字段的整数值加上增量increment</li><li>hkeys key   //获取所有哈希表中的字段</li><li>hlen key    //获取哈希表中字段的数量</li><li>hvals key   //获取哈希表中所有值</li><li>hset key field value  //将哈希表中的字段field的值设为value</li></ol></li></ol><ol start="4"><li><p>列表 ：是简单的字符串列表，按照插入顺序排序，你可以添加一个元素到列表的头部或者尾部</p><ol><li>lpush key value   //将value值插入key列表中</li><li>blpop key1 timeout   //移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。<br>3.BRPOP key1 timeout   //移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</li><li>lindex key index    //通过索引获取列表中的元素</li><li>linsert key before|after pivot value  //在列表的元素前或后插入元素</li><li>llen key   //获取列表长度</li><li>lpop key   //移出并获取列表的第一个元素</li><li>lpush key value //将一个值插入到已存在的列表头部</li><li>lrem key count value   //移除列表元素</li><li>rpushx key value  //为已存在的列表添加值</li></ol></li><li><p>集合：Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。<br>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><ol><li>sadd key member1 //向集合添加一个或多个成员</li><li>scard key    //获取集合的成员数</li><li>sdiff key1   //返回给定所有集合的差集</li><li>sinter key1  //返回给定所有的交集</li><li>sismember key member  //判断member元素是否是集合key的成员</li><li>spop key     //移除并返回集合中的一个随机元素</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;redis常用命令&quot;&gt;&lt;a href=&quot;#redis常用命令&quot; class=&quot;headerlink&quot; title=&quot;redis常用命令&quot;&gt;&lt;/a&gt;redis常用命令&lt;/h4&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://lpower.com/categories/数据库/"/>
    
    
    <category term="redis" scheme="http://lpower.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>php文件上传</title>
    <link href="http://lpower.com/2019/04/19/php%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://lpower.com/2019/04/19/php%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2019-04-19T06:53:58.000Z</published>
    <updated>2021-08-03T11:33:31.633Z</updated>
    
    <content type="html"><![CDATA[<h4 id="PHP实现文件上传"><a href="#PHP实现文件上传" class="headerlink" title="PHP实现文件上传"></a>PHP实现文件上传</h4><a id="more"></a><ol><li><p>_FILES</p><p> $_FILES是PHP的全局数组，可以上传文件。第一个参数是文件名，第二个参数可以使如下所示的几个：</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$_FILES["file"]["name"] - 上传文件的名称</span><br><span class="line">$_FILES["file"]["type"] - 上传文件的类型</span><br><span class="line">$_FILES["file"]["size"] - 上传文件的大小，以字节计</span><br><span class="line">$_FILES["file"]["tmp_name"] - 存储在服务器的文件的临时副本的名称</span><br><span class="line">$_FILES["file"]["error"] - 由文件上传导致的错误代码</span><br></pre></td></tr></tbody></table></figure><p> 错误代码各值所代表的意思：</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UPLOAD_ERR_OK           //其值为 0，没有错误发生，文件上传成功。 </span><br><span class="line">UPLOAD_ERR_INI_SIZE     //其值为 1，上传的文件超过了 php.ini 中 upload_max_filesize 选项限制的值。 </span><br><span class="line">UPLOAD_ERR_FORM_SIZE    //其值为 2，上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值。 </span><br><span class="line">UPLOAD_ERR_PARTIAL      //其值为 3，文件只有部分被上传。 </span><br><span class="line">UPLOAD_ERR_NO_FILE      //其值为 4，没有文件被上传。 </span><br><span class="line">UPLOAD_ERR_NO_TMP_DIR   //其值为 6，找不到临时文件夹。PHP 4.3.10 和 PHP 5.0.3 引进。 </span><br><span class="line">UPLOAD_ERR_CANT_WRITE   //其值为 7，文件写入失败。PHP 5.1.0 引进。</span><br></pre></td></tr></tbody></table></figure></li><li><p>move_uploaded_file</p><ul><li>move_uploaded_file函数，将上传的文件移动到新的位置。</li><li>说明：<code>move_uploaded_file( string $filename, string $destination) : bool</code>,本函数检查并确保由 filename 指定的文件是合法的上传文件（即通过 PHP 的 HTTP POST 上传机制所上传的）。如果文件合法，则将其移动为由 destination 指定的文件。 这种检查显得格外重要，如果上传的文件有可能会造成对用户或本系统的其他用户显示其内容的话。 </li><li>参数：<code>filename</code> 上传的文件名      <code>destination</code> 要移动到的位置</li></ul></li><li><p>文件上传表单</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset="utf-8"&gt;</span><br><span class="line">&lt;title&gt;lpower&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action="upload_file.php" method="post" enctype="multipart/form-data"&gt;</span><br><span class="line">    &lt;label for="file"&gt;文件名：&lt;/label&gt;</span><br><span class="line">    &lt;input type="file" name="file" id="file"&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type="submit" name="submit" value="提交"&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p> 注意：</p><form> 标签的 enctype 属性规定了在提交表单时要使用哪种内容类型。在表单需要二进制数据时，比如文件内容，请使用 “multipart/form-data”。</form><p></p></li><li><p>上传脚本</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 允许上传的图片后缀</span><br><span class="line">$allowedExts = array("gif", "jpeg", "jpg", "png");</span><br><span class="line">$temp = explode(".", $_FILES["file"]["name"]);</span><br><span class="line">echo $_FILES["file"]["size"];</span><br><span class="line">$extension = end($temp);     // 获取文件后缀名</span><br><span class="line">if ((($_FILES["file"]["type"] == "image/gif")</span><br><span class="line">|| ($_FILES["file"]["type"] == "image/jpeg")</span><br><span class="line">|| ($_FILES["file"]["type"] == "image/jpg")</span><br><span class="line">|| ($_FILES["file"]["type"] == "image/pjpeg")</span><br><span class="line">|| ($_FILES["file"]["type"] == "image/x-png")</span><br><span class="line">|| ($_FILES["file"]["type"] == "image/png"))</span><br><span class="line">&amp;&amp; ($_FILES["file"]["size"] &lt; 204800)   // 小于 200 kb</span><br><span class="line">&amp;&amp; in_array($extension, $allowedExts))</span><br><span class="line">{</span><br><span class="line">    if ($_FILES["file"]["error"] &gt; 0)</span><br><span class="line">    {</span><br><span class="line">        echo "错误：: " . $_FILES["file"]["error"] . "&lt;br&gt;";</span><br><span class="line">    }</span><br><span class="line">    else</span><br><span class="line">    {</span><br><span class="line">        echo "上传文件名: " . $_FILES["file"]["name"] . "&lt;br&gt;";</span><br><span class="line">        echo "文件类型: " . $_FILES["file"]["type"] . "&lt;br&gt;";</span><br><span class="line">        echo "文件大小: " . ($_FILES["file"]["size"] / 1024) . " kB&lt;br&gt;";</span><br><span class="line">        echo "文件临时存储的位置: " . $_FILES["file"]["tmp_name"] . "&lt;br&gt;";</span><br><span class="line">        </span><br><span class="line">        // 判断当期目录下的 upload 目录是否存在该文件</span><br><span class="line">        // 如果没有 upload 目录，你需要创建它，upload 目录权限为 777</span><br><span class="line">        if (file_exists("upload/" . $_FILES["file"]["name"]))</span><br><span class="line">        {</span><br><span class="line">            echo $_FILES["file"]["name"] . " 文件已经存在。 ";</span><br><span class="line">        }</span><br><span class="line">        else</span><br><span class="line">        {</span><br><span class="line">            // 如果 upload 目录不存在该文件则将文件上传到 upload 目录下</span><br><span class="line">            move_uploaded_file($_FILES["file"]["tmp_name"], "upload/" . $_FILES["file"]["name"]);</span><br><span class="line">            echo "文件存储在: " . "upload/" . $_FILES["file"]["name"];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">else</span><br><span class="line">{</span><br><span class="line">    echo "非法的文件格式";</span><br><span class="line">}</span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure><p> 服务器的 PHP 临时文件夹中创建了一个被上传文件的临时副本,要保存上传的文件，要拷贝到upload文件下。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;PHP实现文件上传&quot;&gt;&lt;a href=&quot;#PHP实现文件上传&quot; class=&quot;headerlink&quot; title=&quot;PHP实现文件上传&quot;&gt;&lt;/a&gt;PHP实现文件上传&lt;/h4&gt;</summary>
    
    
    
    <category term="PHP" scheme="http://lpower.com/categories/PHP/"/>
    
    
    <category term="代码" scheme="http://lpower.com/tags/代码/"/>
    
  </entry>
  
  <entry>
    <title>linux下配置与使用Redis</title>
    <link href="http://lpower.com/2019/04/17/linux%E4%B8%8B%E4%BD%BF%E7%94%A8Redis/"/>
    <id>http://lpower.com/2019/04/17/linux%E4%B8%8B%E4%BD%BF%E7%94%A8Redis/</id>
    <published>2019-04-17T09:05:31.000Z</published>
    <updated>2021-08-03T11:33:31.637Z</updated>
    
    <content type="html"><![CDATA[<h4 id="突然发现自己的非关系型数据库的知识几近于无，因此就想学习一点这方面的知识"><a href="#突然发现自己的非关系型数据库的知识几近于无，因此就想学习一点这方面的知识" class="headerlink" title="突然发现自己的非关系型数据库的知识几近于无，因此就想学习一点这方面的知识"></a>突然发现自己的非关系型数据库的知识几近于无，因此就想学习一点这方面的知识</h4><a id="more"></a><ol><li><p>NoSQL</p><p> 又称非关系型数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。NoSQL用于超大规模数据的存储。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p><p> 优点：高可扩展性，分布式计算，成本低，具有灵活的架构，半结构化数据，无复杂关系</p></li><li><p>Redis</p><ul><li>非关系型数据库中的一种，完全开源免费，是一个高性能的key-value数据库</li><li><p>特点：<br>  Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</p><p>  Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</p><p>  Redis支持数据的备份，即master-slave模式的数据备份。</p></li><li><p>优势：</p><ul><li>性能高，读的速度为110000次/s，写的速度是81000次/s</li><li>丰富的数据类型，支持 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子性，单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性，支持 publish/subscribe, 通知, key 过期等等特性。</li></ul></li></ul></li><li><p>Linux下配置Redis环境（PHP）</p><ol><li>首先需要一个Linux环境，我用的是虚拟机，系统是centos7</li><li><p>修改防火墙配置</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line">//在里面写入需要开放的端口</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT（允许Apache80端口通过防火墙） </span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT（允许PHP3306端口通过防火墙）</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 6379 -j ACCEPT（允许redis6379端口通过防火墙）</span><br></pre></td></tr></tbody></table></figure><p> 之后重启防火墙<code>systemctl restart firewalld.service</code>，使服务生效。</p></li><li><p>安装Apache：执行以下命令</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd  //yum安装Apache</span><br><span class="line">systemctl start httpd.service  //启动httpd服务</span><br><span class="line">systemctl enable httpd.service //设置开机自启</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装PHP：执行以下命令</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum install php  //安装PHP</span><br><span class="line">systemctl start php-fpm  //开启PHP服务</span><br><span class="line">cd /var/www/html   // 切换到www路径，写一下测试</span><br><span class="line">vim index.php    //这里随便起名</span><br><span class="line">//这里是测试用例</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?</span><br></pre></td></tr></tbody></table></figure><p> 写完以后，确保Apache服务是开启的，可以执行<code>systemctl status httpd</code>这个语句来确定Apache的状态，如果是running，证明是开启的。然后去浏览器里输入localhost/index.php，如果出现以下的结果，证明安装成功。<br> <img src="/2019/04/17/linux下使用Redis/phpinfo.png" alt></p></li><li><p>安装Redis：执行以下命令</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install redis</span><br><span class="line">yum install epel-release</span><br><span class="line">yum install redis</span><br><span class="line">systemctl start redis</span><br><span class="line">systemctl status redis</span><br><span class="line">systemctl enable redis</span><br></pre></td></tr></tbody></table></figure></li><li><p>Redis配置,可以直接修改配置文件，也可以在命令行里修改。</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379  //redis端口号6379，本地登录</span><br><span class="line">//查看配置</span><br><span class="line">config get *    //查看所有配置</span><br><span class="line">//为redis设置密码</span><br><span class="line">config set requirepass 'password' </span><br><span class="line">auth password</span><br><span class="line">config get requirepass</span><br></pre></td></tr></tbody></table></figure><p> 设置完密码后，重新登陆。如果不输入密码，当你输入命令后，会提示报错。因此当你登录进去后，首先要输入<code>auth password</code>才能继续使用。当然，也可以在登录时直接输入密码，命令是<code>redis-cli -h 127.0.0.1 -p 6379 -a password</code>，这样登陆进去之后就可以直接使用。</p><p> 查看全部配置：</p><p> <img src="/2019/04/17/linux下使用Redis/全部配置.png" alt></p></li><li><p>php与redis</p><ul><li>首先，需要安装PHP扩展<code>yum install php-pecl-redis</code></li><li><p>然后，修改php配置文件</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/php.ini   //编辑配置文件</span><br></pre></td></tr></tbody></table></figure><p>  如果找不到php.ini,可以使用whereis命令，在配置文件最后，添加<code>extension=redis.so</code>,保存并退出。</p></li><li><p>测试：去Apache目录下vim一个测试文件</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/html</span><br><span class="line">vim test.php</span><br><span class="line">&lt;?php</span><br><span class="line">//连接本地的 Redis 服务</span><br><span class="line">$redis = new Redis();</span><br><span class="line">$redis-&gt;connect('127.0.0.1', 6379);</span><br><span class="line">$redis-&gt;auth('password');</span><br><span class="line">echo "Connection to server successfully";</span><br><span class="line">        //查看服务是否运行</span><br><span class="line">echo "Server is running: " . $redis-&gt;ping();</span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure><p>  成功之后，会输出Connection to server successfullyServer is running: +PONG<br>  <img src="/2019/04/17/linux下使用Redis/测试.png" alt><br>  这样就代表我们能够使用PHP操作Redis了。</p></li></ul></li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;突然发现自己的非关系型数据库的知识几近于无，因此就想学习一点这方面的知识&quot;&gt;&lt;a href=&quot;#突然发现自己的非关系型数据库的知识几近于无，因此就想学习一点这方面的知识&quot; class=&quot;headerlink&quot; title=&quot;突然发现自己的非关系型数据库的知识几近于无，因此就想学习一点这方面的知识&quot;&gt;&lt;/a&gt;突然发现自己的非关系型数据库的知识几近于无，因此就想学习一点这方面的知识&lt;/h4&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://lpower.com/categories/数据库/"/>
    
    
    <category term="redis" scheme="http://lpower.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>php验证码</title>
    <link href="http://lpower.com/2019/03/25/php%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://lpower.com/2019/03/25/php%E9%AA%8C%E8%AF%81%E7%A0%81/</id>
    <published>2019-03-25T08:05:08.000Z</published>
    <updated>2021-08-03T11:33:31.635Z</updated>
    
    <content type="html"><![CDATA[<h3 id="刚刚看了验证码的实现过程，觉得有必要记一下"><a href="#刚刚看了验证码的实现过程，觉得有必要记一下" class="headerlink" title="刚刚看了验证码的实现过程，觉得有必要记一下"></a>刚刚看了验证码的实现过程，觉得有必要记一下</h3><a id="more"></a><ol><li>实现函数<br> 1) imagecreatefromjpeg() 载入图片<br> 2) imageTTFText() 设置字体颜色<br> 3) imagefill() 填充背景<br> 4) imagejpeg() 创建jpg图片<br> 5) imagedestory() 销毁图片，释放内存空间</li><li><p>代码实现</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//制作验证码</span><br><span class="line">//创建画布</span><br><span class="line">$img = imagecreatetruecolor(170, 40);</span><br><span class="line">//填充背景色</span><br><span class="line">$backcolor = imagecolorallocate($img, 255, 255, 255);//默认红、绿、蓝三色。</span><br><span class="line">imagefill($img, 0, 0, $backcolor);</span><br><span class="line">//产生随机验证码字符串</span><br><span class="line">$arr = array_merge(range(0,9),range('a','z'),range('A','Z'));//array_merge() 将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。</span><br><span class="line">shuffle($arr);//打乱数组，伪随机</span><br><span class="line">$rand_keys = array_rand($arr,4);</span><br><span class="line">$str = '';</span><br><span class="line">foreach ($rand_keys as  $value) {</span><br><span class="line">    $str .= $arr[$value]; </span><br><span class="line">}</span><br><span class="line">//保存到session</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION['captcha'] = $str;//将获取的随机数验证码写入到session变量中</span><br><span class="line">//添加文字</span><br><span class="line">$span = floor(170/(4+1));</span><br><span class="line">for($i=1;$i&lt;=4;$i++) {</span><br><span class="line">    $stringcolor = imagecolorallocate($img, mt_rand(0,255), mt_rand(0,100), mt_rand(0,80));</span><br><span class="line">    imagestring($img, 5, $i*$span, 12, $str[$i-1], $stringcolor);//水平输出字符</span><br><span class="line">}</span><br><span class="line">//添加干扰线</span><br><span class="line">for ($i=1; $i&lt;=6 ; $i++) {</span><br><span class="line">    $linecolor = imagecolorallocate($img,mt_rand(0,255),mt_rand(0,100),mt_rand(0,80));</span><br><span class="line">    imageline($img,mt_rand(0,169),mt_rand(0,39),mt_rand(0,169),mt_rand(0,39),$linecolor);//设置随机字体和x,y坐标</span><br><span class="line">}</span><br><span class="line">//添加干扰点</span><br><span class="line">for($i=0;$i&lt;strlen($_SESSION['captcha']);$i++){</span><br><span class="line">    $pixel = imagecolorallocate($img,mt_rand(100,150),mt_rand(0,120),mt_rand(0,255));//设置背景色</span><br><span class="line">    imagesetpixel($img, mt_rand(0,169), mt_rand(0,39), $pixel);//设置随机字体和x,y坐标</span><br><span class="line">}</span><br><span class="line">//输出图片</span><br><span class="line">header("Content-type:image/png");</span><br><span class="line">ob_clean();//清理缓冲区</span><br><span class="line">imagepng($img);//输出图片</span><br><span class="line">imagedestroy($img);//销毁图片</span><br></pre></td></tr></tbody></table></figure><p> mt_rand()返回随机整数</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;刚刚看了验证码的实现过程，觉得有必要记一下&quot;&gt;&lt;a href=&quot;#刚刚看了验证码的实现过程，觉得有必要记一下&quot; class=&quot;headerlink&quot; title=&quot;刚刚看了验证码的实现过程，觉得有必要记一下&quot;&gt;&lt;/a&gt;刚刚看了验证码的实现过程，觉得有必要记一下&lt;/h3&gt;</summary>
    
    
    
    <category term="PHP" scheme="http://lpower.com/categories/PHP/"/>
    
    
    <category term="代码" scheme="http://lpower.com/tags/代码/"/>
    
  </entry>
  
  <entry>
    <title>关于http的一些总结</title>
    <link href="http://lpower.com/2019/03/19/%E5%85%B3%E4%BA%8Ehttp%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://lpower.com/2019/03/19/%E5%85%B3%E4%BA%8Ehttp%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</id>
    <published>2019-03-19T07:51:29.000Z</published>
    <updated>2021-08-03T11:33:31.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="http在学习网络的过程中是必不可少的，所以在这里整理了一些关于HTTP的知识点"><a href="#http在学习网络的过程中是必不可少的，所以在这里整理了一些关于HTTP的知识点" class="headerlink" title="http在学习网络的过程中是必不可少的，所以在这里整理了一些关于HTTP的知识点"></a>http在学习网络的过程中是必不可少的，所以在这里整理了一些关于HTTP的知识点</h2><a id="more"></a><ol><li>HTTP2与之前的版本的比较<ul><li>所有数据均以二进制传输</li><li>同一个连接里面发送多个请求不再需要按照顺序来</li><li>增加了头信息压缩以及推送(并行推送css,html等)等提高效率的功能</li></ul></li><li><p>HTTP三次握手</p><p> <img src="http/三次握手.png" alt></p><p> SYN:标志位<br> Seq 随机产生<br> 回应：ACK = Seq+1</p><ul><li>客户端发给服务器一个信号(SYN=1,Seq=0)。服务器端收到后，回应给客户端(SYN=1,ACK=1,Seq=0),当客户端收到服务器端的信号后，再回复给客户端，告知自己收到消息(ACK=1,Seq=0)。三次握手完毕后，确认可以安全传输。</li><li>功能：防止服务端开启一些无用的连接，减少服务器一些不必要的开销。</li></ul></li><li><p>URI URL URN</p><ul><li><p>URI Uniform Resource Identifier/统一资源标识符</p><ul><li><p>用来唯一标识互联网上的信息资源</p></li><li><p>包含URL和URN</p></li></ul></li><li>URL Uniform Resource Locator/统一资源定位器<ul><li><a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a>  此类格式的都叫做URL，还有ftp协议等等。</li></ul></li><li>URN 永久统一资源定位符<ul><li>在资源移动之后还能被找到</li></ul></li></ul></li><li><p>http报文<br> <img src="http/http报文.png" alt></p><ul><li><p>请求部分：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首行第一部分     method  请求方法  get,post等</span><br><span class="line">首行第二部分     url（请求的地址）</span><br><span class="line">首行第三部分     协议版本</span><br></pre></td></tr></tbody></table></figure></li><li><p>响应报文：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首行第一部分       协议版本</span><br><span class="line">首行第二部分        code 200表示正常</span><br><span class="line">首行第三部分        明文表示code的含义</span><br></pre></td></tr></tbody></table></figure></li><li><p>http方法</p><p>  用来定义对于资源的操作   GET post等</p></li><li>HTTP CODE ,可以判断结果.</li><li>定义服务器对请求的处理结果，各个区间的CODE有各自的意义<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">100-199 代表请求已经被接受，需要继续处理  eg:100 Continue</span><br><span class="line">200-299 代表请求已成功被接收，理解并接受   eg:200 OK 202 accepted</span><br><span class="line">300-399 代表需要客户端采取进一步的操作才能完成请求，通常用来重定向 </span><br><span class="line">eg:307 Temporary Redirect</span><br><span class="line">在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。</span><br><span class="line">与302相反，当重新发出原始请求时，不允许更改请求方法。</span><br><span class="line">例如，应该使用另一个POST请求来重复POST请求。</span><br><span class="line">400-499  代表客户端看起来可能发生了错误   eg:403  forbidden 404 not found</span><br><span class="line">500-599  代表服务器错误  eg: 500   502 网关错误</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>CORS跨域请求的限制与解决</p><ul><li>CORS</li></ul><ol><li><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p></li><li><p>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p></li></ol><ul><li><p>限制</p><ol><li>浏览器同域请求，在浏览器这边发送的Ajax请求必须在同域里，如果跨域，需要服务器同意</li><li>请求头限制</li></ol></li><li><p>解决</p><p>  可以通过放入<code>Access-Control-Allow-Origin: '*'</code>来实现跨域(‘*’ 代表任何服务都可以跨域   可以设置为一个特定的域名)</p><p>  在script,link,image标签里写路径，加载一些东西的时候，浏览器是允许跨域的</p></li><li><p>CORS预请求</p><p>  除GET,POST,HEAD三种方法 及三种Content-Type(text/plain,multipart/form-data,application/x-www-form-urlencoded)外，其他都需要预请求</p></li></ul></li></ol><ol start="6"><li><p>cookie和session</p><ul><li><p>cookie</p><p>  在服务端返回数据时，通过Set-Cookie这个head设置在浏览器里面，保存在浏览器里面的一个内容。</p><p>  下次请求会自动带上     </p><p>  键值对，可以设置多个</p><p>  有时效，如果没有设置时间，关闭浏览器后就会删除</p><p>  属性：<br>  max-age和expires设置时间</p><p>  Secure只在http的时候发送</p><p>  HttpOnly无法通过documents.cookie访问(防止CSRF注入)</p></li><li><p>session</p><p>  位于web服务器上，主要负责访问者与网站之间的交互</p><p>  关闭网站时会话结束</p><p>  无法永久保存数据</p></li><li><p>cookie与session的区别</p><p>  session比cookie更安全</p><p>  cookie在客户端，session在服务器上</p><p>  cookie能够保存的数据较小</p></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;http在学习网络的过程中是必不可少的，所以在这里整理了一些关于HTTP的知识点&quot;&gt;&lt;a href=&quot;#http在学习网络的过程中是必不可少的，所以在这里整理了一些关于HTTP的知识点&quot; class=&quot;headerlink&quot; title=&quot;http在学习网络的过程中是必不可少的，所以在这里整理了一些关于HTTP的知识点&quot;&gt;&lt;/a&gt;http在学习网络的过程中是必不可少的，所以在这里整理了一些关于HTTP的知识点&lt;/h2&gt;</summary>
    
    
    
    <category term="协议" scheme="http://lpower.com/categories/协议/"/>
    
    
    <category term="HTTP" scheme="http://lpower.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>实训笔记</title>
    <link href="http://lpower.com/2019/01/03/%E5%AE%9E%E8%AE%AD%E7%AC%94%E8%AE%B0/"/>
    <id>http://lpower.com/2019/01/03/%E5%AE%9E%E8%AE%AD%E7%AC%94%E8%AE%B0/</id>
    <published>2019-01-03T02:26:13.000Z</published>
    <updated>2021-08-03T11:33:31.684Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2019年第一篇博客，我大学生涯的第一次实训，在大连诺达，学了一些思科模拟器的使用和一点网络安全基础（防火墙）-使用的是思科的eve"><a href="#2019年第一篇博客，我大学生涯的第一次实训，在大连诺达，学了一些思科模拟器的使用和一点网络安全基础（防火墙）-使用的是思科的eve" class="headerlink" title="2019年第一篇博客，我大学生涯的第一次实训，在大连诺达，学了一些思科模拟器的使用和一点网络安全基础（防火墙）,使用的是思科的eve"></a>2019年第一篇博客，我大学生涯的第一次实训，在大连诺达，学了一些思科模拟器的使用和一点网络安全基础（防火墙）,使用的是思科的eve</h3><a id="more"></a><h4 id="一、交换机和MAC地址"><a href="#一、交换机和MAC地址" class="headerlink" title="一、交换机和MAC地址"></a>一、交换机和MAC地址</h4><ol><li>单工，半双工，全双工</li></ol><ul><li>单工：数据只能沿一个方向发送，另一个方向是无法发送数据的。</li><li>半双工：数据可以沿两个方向发送，但同一时间只可能有一台设备发送数据。</li><li>全双工：数据可以沿两个方向同时发送。</li><li>TYPE的取值：0800代表IP协议  0806代表arp协议<h4 id="二、iOS软件操作"><a href="#二、iOS软件操作" class="headerlink" title="二、iOS软件操作"></a>二、iOS软件操作</h4></li></ul><ol><li>路由器：</li></ol><ul><li>1）首先输入no     初始化配置对话</li><li>2） en                 进入特权模式</li><li>3）configuration terminal   进入全局配置模式</li><li>4）hostname xxx   修改主机名</li></ul><ol start="2"><li>IP地址</li></ol><ul><li><p>1）配置</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">step1：进入要配置IP地址的接口。</span><br><span class="line">命令：全局配置模式下：interface +接口号</span><br><span class="line">step2：配置IP地址</span><br><span class="line">命令：接口子配置模式下：ip address IP地址 子网掩码</span><br><span class="line">示例：R1(config-if)#ip address 12.1.1.1 255.255.255.0</span><br><span class="line">step3：开启接口，因为接口模式情况下是关闭的，即使配置IP地址也无法正常工作，所以需要开启接口。</span><br><span class="line">命令：接口子配置模式下：no shutdown</span><br><span class="line">示例：R1(config-if)#no shutdown</span><br><span class="line">step4：exit退出接口子配置模式进入另一个接口。</span><br><span class="line">step5：检查IP地址配置</span><br></pre></td></tr></tbody></table></figure><p>  命令：特权模式下：show ip interface brief显示接口的三层摘要信息。在除了执行模式外其它模式输入执行命令时，需要在命令前添加do 关键字。<br>  检查IP地址配置是否无误，使用ping命令，来检查一对直连接口的IP 。</p></li><li><p>2）分类</p><ul><li><p>IP地址根据其使用的方式分为ABCDE5类。分类的依据是一个IP地址当中前4bit的取值情况，按照如下规则进行分类。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A：0xxx      </span><br><span class="line">B：10xx</span><br><span class="line">C：110x</span><br><span class="line">D：1110    组播IP地址</span><br><span class="line">E：1111     保留科研用IP地址</span><br></pre></td></tr></tbody></table></figure><p>A类地址的范围为1~126。0为保留地址。127为本地环回地址。<br>B类地址的范围为128~191。169.254为本地链路地址，DHCP获取地址失败时会使用该地址。<br>C类地址的范围为192~223。<br>本地广播地址：255.255.255.255（也就是32个1）</p></li><li>网络位：标识主机所属的网络</li><li>主机位：标识网络中的一台主机</li></ul></li><li>3）封装与解封<ul><li>IP首部<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">版本（4bit）：描述IP协议版本。一般为4。</span><br><span class="line">IHL（4bit）：描述IP协议首部长度。</span><br><span class="line">ToS（8bit）：用于标记流量，用作QoS。</span><br><span class="line">总长度（16bit）：代表一个IP数据包的总长度。</span><br><span class="line">标识（16bit）：相同的标识代表分片数据包属于同一个源数据包。</span><br><span class="line">标志（3bit）：0（保留，恒为0）0（DF位，禁止分片位）0（MF更多分片位）</span><br><span class="line">片偏移（13bit）：当前分片的第一个bit与原始分片的第一个bit的相对位移。</span><br><span class="line">MTU：最大传输单元，默认情况下多为1500</span><br><span class="line">TTL（8bit）：当TTL为0时，该数据包将被丢弃。用于减缓产生路由环路后对网络的影响。</span><br><span class="line">协议（8bit）：用于指示IP报文的上层协议。（例：TCP 6，UDP 17，ICMP 1）</span><br><span class="line">首部校验和（16bit）：检查IP首部在传输过程当中的完整性。</span><br><span class="line">源IP地址（32bit）：源主机IP地址</span><br><span class="line">目的IP地址（32bit）：目的主机IP地址</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h4 id="三、传输层（tcp，udp，arp，路由表）"><a href="#三、传输层（tcp，udp，arp，路由表）" class="headerlink" title="三、传输层（tcp，udp，arp，路由表）"></a>三、传输层（tcp，udp，arp，路由表）</h4><ol><li><p>telnet协议（远程管理协议）</p><ul><li>实验配置：<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PC配置</span><br><span class="line">Router(config)#hostname PC            //将路由器的主机名设置为PC</span><br><span class="line">PC(config)#int e0/0               //进入设备的e0/0接口子配置模式</span><br><span class="line">PC(config-if)#ip address 12.1.1.1 255.255.255.0     //设置e0/0接口的IP地址为12.1.1.1/24</span><br><span class="line">PC(config-if)#no sh                        //开启e0/0接口</span><br><span class="line">PC(config)#no ip routing              //关闭路由器的路由功能</span><br><span class="line">PC(config)#ip default-gateway 12.1.1.2       //设置路由器的默认网关</span><br><span class="line">（备注：用路由器模拟PC的时候，必须关闭路由器的路由功能并为它设置默认网关。因为一台路由器收到一个目的地址未知的数据包，就会将它丢弃。而主机收到一个目的地址未知的数据包，会把它交给自己的网关）</span><br><span class="line">路由器的配置</span><br><span class="line">Router(config)#hostname ROUTER       //将路由器的主机名设定为ROUTER</span><br><span class="line">ROUTER(config)#int e0/0                 //进入e0/0接口的子配置模式</span><br><span class="line">ROUTER(config-if)#ip address 12.1.1.2 255.255.255.0 //设置e0/0接口的IP地址为12.1.1.2/24</span><br><span class="line">ROUTER(config-if)#no sh            //开启e0/0接口</span><br><span class="line">ROUTER(config)#line vty 0 4           //开启虚拟终端线路0到4共5条</span><br><span class="line">ROUTER(config-line)#transport input telnet      //限制入方向只能通过TELNET进行连接</span><br><span class="line">ROUTER(config-line)#password cisco123           //配置线路密码</span><br><span class="line">ROUTER(config-line)#login           //开启线路下密码认证功能</span><br><span class="line">验证实验效果</span><br><span class="line">PC&gt;telnet 12.1.1.2        //使用telnet协议连接12.1.1.2主机，默认端口号23。</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>路由表</p><ul><li><p>查看路由器的路由表：<code>show ip route</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C        10.1.10.0/24 is directly connected, Ethernet0/0</span><br><span class="line">L        10.1.10.254/32 is directly connected, Ethernet0/0</span><br><span class="line">C        10.1.20.0/24 is directly connected, Ethernet0/1</span><br><span class="line">L        10.1.20.254/32 is directly connected, Ethernet0/1</span><br></pre></td></tr></tbody></table></figure></li><li><p>路由表中的每个路由条目，以一个网络地址作为主项。</p></li><li><p>最前面的代码，一般是一个大写字母，代表一个路由表项的来源，常见来源：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   C直连路由</span><br><span class="line">L本地路由</span><br><span class="line">DEIGRP路由</span><br><span class="line">RRIP路由</span><br><span class="line">S静态路由</span><br><span class="line">OOSPF路由</span><br></pre></td></tr></tbody></table></figure></li><li><p>一条路由可能在最后带有一个出接口。代表去往该网络需要将数据从出接口转发出去。有些路由没有出接口。没有出接口的路由一定会带有下一跳路由器信息，根据该信息可以进行路由的递归查询。</p></li><li>一条路由可能在最后带有一个下一跳，代表去网该网络需要将数据发往哪个主机。</li><li>一条路由（除了直连），一定会带有一个方括号，里面包含一对儿数字，其中前面的数字为AD（管理距离）后面的数字叫Metric(度量)。</li><li>管理距离代表路由器对某种路由来源的信任程度。越小越好。常见管理距离，直连路由为0，静态路由默认为1，EIGRP为90，OSPF为110，RIP为120。管理距离越小，路由器越信任某种路由。</li><li>度量代表路由协议通过何种方式计算到达目标网络的距离。也是越小越好。常见的度量标准有带宽（OSPF），跳数（RIP）和综合度量值（EIGRP）。目前的情况来看带宽是对数据传输能力影响最大的参数，所以推荐使用以带宽作为度量标准的路由协议（OSPF和ISIS和EIGRP）。</li></ul></li><li>arp（地址解析协议）</li></ol><ul><li>1）0x0806对应ARP协议</li><li><p>2）ARP请求报文中的关键字段：</p><ul><li>源协议地址：发送主机的IP地址</li><li>目的协议地址：目标主机的IP地址</li><li>源硬件地址：发送主机的MAC地址</li><li><p>目的硬件地址：00-00-00-00-00-00</p><p>如果主机收到一个ARP请求，其中的目的协议地址是自己的IP地址，则他会向发来ARP请求的主机发送ARP回复。ARP回复是单播发送的</p></li></ul></li></ul><h4 id="四、路由基础"><a href="#四、路由基础" class="headerlink" title="四、路由基础"></a>四、路由基础</h4><ol><li>静态路由</li></ol><ul><li><p>静态路由配置</p><p>  <code>R1(config)#ip route 10.1.2.0 255.255.255.0 12.1.1.2</code></p><p>  配置一条到达10.1.2.0/24的路由，下一跳路由器接口IP地址为12.1.1.2。</p></li><li><p>配置静态路由一定要注意，下一跳接口地址必须可达。否则该静态路由不会装载进路由表。</p></li><li>配置静态路由一定要注意单向路由问题。一个单向路由是没有意义的</li></ul><ol start="2"><li><p>默认路由</p><p> <code>R1(config)#ip route 0.0.0.0 0.0.0.0 12.1.1.2</code><br> 配置一条指向12.1.1.2的静态默认路由。</p><p> 默认路由是一种特殊的路由，它的前缀长度为0。所以默认路由可以被理解为描述一个最大的网络的路由，该网络可以包含任何一个IP网络。在末节路由器上常常配置默认路由来减少路由配置的复杂度。只要拥有任何一条明细路由，数据便不会匹配默认路由进行转发，这是由于路由表拥有最长子网掩码匹配的特性。任何明细路由子网掩码长度都会比默认路由的0更长一些，所以在有明细路由的情况下，数据不会匹配默认路由进行发送。</p><h4 id="五、icmp（互联网控制协议）"><a href="#五、icmp（互联网控制协议）" class="headerlink" title="五、icmp（互联网控制协议）"></a>五、icmp（互联网控制协议）</h4></li></ol><ul><li>IP协议号 1<ul><li>校验和与IP和TCP/UDP校验和一样用于检查数据的完整性。</li><li>类型用于表明该ICMP报文属于什么类型。</li><li>代码用于表明该ICMP报文属于某种类型的子类型。</li></ul></li><li>大部分ICMP类型的报文我们目前已经停止使用了。现在还在频繁使用的ICMP类型有：</li></ul><ol><li>ICMP 类型8：回显请求。PING命令用于控制一台设备发送一个回显请求到某一个特定主机。收到回显请求的主机必须用回显应答进行响应。如果对端主机无法在规定时间内对回显请求进行响应，通常说明本主机与目标主机存在IP连通性故障。</li><li>ICMP类型0：回显应答。在收到某主机发送过来的回显请求后，必须用回显应答对对端主机进行响应。这说明对端主机正在测试与本主机之间的IP连通性。</li><li>ICMP类型3：差错报告报文。当一个主机由于某种原因丢弃了一个IP数据包后，会使用差错报告报文通知该数据包的源IP地址。根据不同的丢包原因，设定不同的CODE。常见丢包原因有：主机不可达，网络不可达，端口不可达等。<h3 id="六、vlan（虚拟局域网）"><a href="#六、vlan（虚拟局域网）" class="headerlink" title="六、vlan（虚拟局域网）"></a>六、vlan（虚拟局域网）</h3></li><li><p>配置</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">VLAN配置命令</span><br><span class="line">Switch(config)#vlan 10</span><br><span class="line">创建一个VLAN号为10的VLAN</span><br><span class="line">Switch(config-vlan)#name HR</span><br><span class="line">将某个VLAN的名字改为HR</span><br><span class="line">Switch(config-if)#switchport mode access</span><br><span class="line">将该接口的模式配置为access</span><br><span class="line">Switch(config-if)#switchport access vlan 10</span><br><span class="line">将该接口分配到VLAN10中</span><br></pre></td></tr></tbody></table></figure></li><li><p>trunk</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">配置命令：</span><br><span class="line">SW1(config-if)#switchport trunk encapsulation dot1q</span><br><span class="line">将接口的Trunk封装修改为802.1q</span><br><span class="line">SW1(config-if)#switchport mode trunk</span><br><span class="line">将接口的模式修改为Trunk</span><br><span class="line">SW1#show interfaces trunk</span><br><span class="line">查看一台交换机接口的trunk情况</span><br></pre></td></tr></tbody></table></figure></li><li><p>vtp</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">VTP基本配置</span><br><span class="line">SW1(config)#vtp mode server</span><br><span class="line">将交换机配置为VTP服务器</span><br><span class="line">SW1(config)#vtp mode client</span><br><span class="line">将交换机配置为VTP客户端</span><br><span class="line">SW1(config)#vtp mode transparent</span><br><span class="line">将交换机配置为VTP透明模式</span><br><span class="line">SW1(config)#vtp domain CCNA</span><br><span class="line">配置VTP域名为CCNA</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="七、DHCP（动态主机配置协议）"><a href="#七、DHCP（动态主机配置协议）" class="headerlink" title="七、DHCP（动态主机配置协议）"></a>七、DHCP（动态主机配置协议）</h4><ol><li><p>DHCP分4次握手从服务器获取一个IP地址。</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1客户端发送一个DISCOVER报文。（广播）</span><br><span class="line">2服务器回应一个OFFER报文。（单播）</span><br><span class="line">3客户端发送一个REQUEST报文。（广播）</span><br><span class="line">4服务器回应一个ACK报文。（单播）</span><br></pre></td></tr></tbody></table></figure></li><li><p>4次握手之后，IP地址被正常的分配给客户端使用。</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ip dhcp pool VLAN10</span><br><span class="line">network 10.1.10.0 255.255.255.0</span><br><span class="line">default-router 10.1.10.254 </span><br><span class="line">ip dhcp pool VLAN20</span><br><span class="line">network 10.1.20.0 255.255.255.0</span><br><span class="line">default-router 10.1.20.254 </span><br><span class="line">ip dhcp pool VLAN30</span><br><span class="line">network 10.1.30.0 255.255.255.0</span><br><span class="line">default-router 10.1.30.254</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="安全方向"><a href="#安全方向" class="headerlink" title="安全方向"></a>安全方向</h3><h4 id="八、ACL-访问控制列表"><a href="#八、ACL-访问控制列表" class="headerlink" title="八、ACL-访问控制列表"></a>八、ACL-访问控制列表</h4><ol><li><p>概念</p><p> 访问控制列表是一种工具。顾名思义，它是一个列表。该列表有非常广泛的用途是各个厂商的安全设备或安全方案中的一个基本组件。该列表最初的作用在于控制访问，后来根据不同的应用场景，发展出不同的作用并衍生出各种其他的策略工具。</p></li><li><p>基本操作</p><p> ACL是一系列包含了permit或deny操作以及对应的条件的有序语句。整个ACL的工作过程如下：自顶向下对每条ACL语句进行评估，一旦发现条件匹配的情况则应用相对应的操作并停止继续向下匹配后续语句。所谓的顶和下是通过ACL的序号来决定的。序号越小，越优先匹配，序号越大匹配的顺序越靠后。</p><p> 所有ACL的末尾，都存在一个deny any的ACL语句。它的序号相当于无限大，也就是说任何用户定义的ACL都将优先于它进行匹配，也就是说如果一个数据没有被任何用户定义的ACL匹配，则它一定会被末尾的deny any语句匹配，并且流量会被拒绝。一方面默认的deny any操作体现了安全策略的基本原则，另一方面要注意，在编辑一个黑名单时，一定要在整个ACL的末尾，明确的permit any。否则，一个所有操作均为deny的ACL是没有实际意义的。<br> <img src="/2019/01/03/实训笔记/ACL示例.png" alt="ACL示例"></p></li><li>分类<ul><li>标准ACL：只能以数据的源IP地址作为条件匹配流量。</li><li>扩展ACL：可以以数据的源IP，目的IP以及其它一些三层和四层报文内容作为条件匹配流量。我们比较常用的是扩展ACL。</li></ul></li><li><p>配置<br> ACL配置：</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">R3(config)#access-list 1 deny   10.1.3.0 0.0.0.255     </span><br><span class="line">//定义一个编号的标准ACL，拒绝10.1.3.0/24为源的数据</span><br><span class="line">R3(config)#access-list 1 permit any</span><br><span class="line">//定义一个编号的标准ACL，放行所有流量</span><br><span class="line">R3(config-if)#ip access-group 1 out </span><br><span class="line">//将编号ACL 1 调用在该接口的出方向上（注意配置模式）</span><br><span class="line">R3#show ip access-lists</span><br><span class="line">//检查配置的ACL以及命中情况。</span><br></pre></td></tr></tbody></table></figure><p> 命名的扩展ACL配置：</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">R3(config)#ip access-list extended DENYHR2SRV</span><br><span class="line">//配置一个名为DENYHR2SRV的扩展ACL</span><br><span class="line">R3(config-ext-nacl)# deny ip 10.1.2.0 0.0.0.255 10.1.100.0 0.0.0.255</span><br><span class="line">//拒绝从10.1.2.0/24去往10.1.100.0/24的所有IP流量</span><br><span class="line">R3(config-ext-nacl)# permit ip any any</span><br><span class="line">//放行所有其它流量</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="九、NAT（网络地址转换）"><a href="#九、NAT（网络地址转换）" class="headerlink" title="九、NAT（网络地址转换）"></a>九、NAT（网络地址转换）</h4><ol><li><p>由来</p><p> IPv4地址资源十分有限，总数只要43亿个左右，而且有大量地址是保留的无法直接分配给主机使用。随着互联网以及物联网的不断发展，接入到互联网中的设备数量越来越多。每一个需要在互联网上通信的设备都需要一个IP地址才能正常工作。私有IP地址的使用不受任何限制，也无需向IANA申请，但私有IP地址在Internet上是不被路由的，因为它破坏了IP地址唯一标识一台互联网主机的特点。在这种情况下，我们想要正常使用互联网资源，需要借助NAT技术。</p></li><li>静态nat配置</li></ol><ul><li>问题:配置静态NAT。马同学家里有运营商分配的合法IP地址12.1.1.1和12.1.1.3。12.1.1.1被配置在TP-LINK路由器的公网接口e0/1上。现在要求配置静态NAT，在内网主机192.168.1.128访问公网时，将他的源IP地址转换为12.1.1.3。（注意配置默认路由）。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/01/03/实训笔记/静态nat.png" alt="nat" title>                </div>                <div class="image-caption">nat</div>            </figure></li><li>配置  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TPLINK(config)#ip route 0.0.0.0 0.0.0.0 12.1.1.2</span><br><span class="line">//配置一条下一跳指向12.1.1.2的默认路由。注意，如果不添加此默认路由，则网关路由器没有到达目的主机的路由会丢弃数据包。但添加去往目的主机的明细路由并不可取，因为目的主机模拟互联网主机，实际上互联网主机的数量会非常庞大，不可能每一个网络的路由都配置在网关路由器上，所以必须使用默认路由。</span><br><span class="line">TPLINK(config)#ip nat inside source static 192.168.1.128 12.1.1.3</span><br><span class="line">//配置内部源转换静态NAT。将内部本地地址192.168.1.128转换为12.1.1.3。</span><br><span class="line">interface Ethernet0/0</span><br><span class="line">ip address 192.168.1.1 255.255.255.0</span><br><span class="line">ip nat inside</span><br><span class="line">interface Ethernet0/1</span><br><span class="line">ip address 12.1.1.1 255.255.255.0</span><br><span class="line">ip nat outside</span><br><span class="line">//配置接口的IP地址以及NAT方向。注意方向不要写反。且必须配置</span><br><span class="line">检查NAT的命令：</span><br><span class="line">TPLINK#show ip nat statistics</span><br><span class="line">//查看NAT的统计信息，包括配置的内部和外部NAT接口以及NAT的命中情况</span><br><span class="line">TPLINK#show ip nat translations</span><br><span class="line">//查看NAT转换表，查看已经配置的NAT的转换情况</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="3"><li>地址类型<ul><li>所有Inside的地址，都是属于你内部设备的地址。</li><li>所有Outside的地址，都是不属于你内部设备的地址。</li><li>所有Local地址，一般是私有IP地址。</li><li>所有Global地址，一般是公有IP地址。</li><li>Inside Local Address:内部主机使用的私有IP地址。</li><li>Inside Global Address:内部主机访问外部网络，将私有IP地址换成的共有IP地址。</li><li>Outside Local Address:外部主机访问内部网络，为其分配的私有IP地址。</li><li>Outside Global Address:外部主机的公有IP地址。</li></ul></li><li>类型</li></ol><ul><li>静态NAT：内部本地地址与内部全局地址的一一对应。每个内部本地地址访问外部网络的时候，需要一个单独的内部全局地址。</li><li>动态NAT：内部本地地址数量多余可用的内部全局地址。所有内部全局地址被放入一个NAT地址池。在内部主机需要访问外部网络的时候，从地址池中获取一个内部全局地址并进行NAT，如果地址池空了，则内部主机无法进行NAT。</li><li><p>PAT：端口地址转换，在转换三层地址的同时，对四层的端口号也进行转换，从而支持一个内部全局地址对应多个内部主机。</p><p>  PAT基本配置</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TPLINK(config)#access-list 1 permit 192.168.1.0 0.0.0.255</span><br><span class="line">//配置一个ACL，匹配NAT的感兴趣流量，本例中，感兴趣流量是源IP地址为192.168.1.0/24的流量。</span><br><span class="line">TPLINK(config)#ip nat inside source list 1 interface Ethernet0/1 overload</span><br><span class="line">//配置一个内部源转换，对ACL1匹配的感兴趣流进行地址转换，将源地址转换为接口E0/1的IP地址，进行超载转换允许多个内部主机同时通过一个内部全局地址访问公网。</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="十、简易密码学"><a href="#十、简易密码学" class="headerlink" title="十、简易密码学"></a>十、简易密码学</h4><ol><li>特点<ul><li>机密性：信息不能被非授权的第三方所读取和理解。</li><li>数据完整性：信息不能被有意或无意的篡改或破坏。</li><li>抗抵赖：不能否认曾经发送过的某些信息或执行过的某些操作。</li><li>源认证：对于数据真实的源进行的识别。</li><li>反重放：防止重复接收看似合法的数据的副本。</li></ul></li><li>散列算法<ul><li>例如MD5加密，哈希算法（SHA）</li></ul></li><li>HMAC算法<ul><li>是基于HASH的消息认证代码，使用一个预共享密钥连同数据一起计算散列值。</li></ul></li><li>加密技术<ul><li>对称加密算法</li><li>非对称加密算法<h4 id="十一、ASA防火墙基础"><a href="#十一、ASA防火墙基础" class="headerlink" title="十一、ASA防火墙基础"></a>十一、ASA防火墙基础</h4></li></ul></li><li>防火墙<ol><li>常见分区<ul><li>公共区域：一般指Internet、公共网络、菲私有网络、不受信任、不受保护。</li><li>DMZ区域：放置企业的公网服务器。</li><li>内部区域：一般指企业内网。</li></ul></li><li>防火墙在各个分区之间强制执行访问控制策略，如果一个区域被攻陷，防止攻击蔓延到另一个区域。</li><li>功能<ul><li>包过滤技术</li><li>状态检测技术（节省资源、相对较安全）</li><li>应用检测功能（AIC）</li></ul></li><li>代理服务器：是客户端和服务器的一个中转站</li><li>IPS与IDS：入侵防御系统和入侵检测系统，与防火墙类似。IPS可以采取阻断的动作，IDS可以向管理员发出警报。</li></ol></li><li><p>ASA配置</p><ol><li>接口配置<ul><li>接口IP地址：配置防火墙接口的IP地址</li><li>接口的安全等级：防火墙接口必须有一个1-100的安全级别。通常接口连接到的区域受信任程度越高，该级别就越高</li><li>接口的名字：防火墙接口必须有一个名字，在很多防火墙特性配置的时候，只能引用防火墙的接口名进行配置</li><li>开启接口： no shutdown</li></ul></li><li>默认访问控制策略：防火墙默认约需所有出站流量，拒绝所有入站流量。<ul><li>出站流量：当流量从一个高安全级别接口始发，去往一个低安全级别接口时，被认为是出站流量</li><li>入站流量：当流量从一个低安全级别接口始发，去往一个高安全级别接口时，被认为是入站流量</li></ul></li><li><p>防火墙基本配置<br> <img src="/2019/01/03/实训笔记/ASA基础配置.png" alt="ASA基础配置"></p><ul><li><p>ASA配置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet0/0</span><br><span class="line">    nameif DMZ</span><br><span class="line">    security-level 50</span><br><span class="line">    ip address 24.1.1.2 255.255.255.0 </span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line">    nameif INSIDE</span><br><span class="line">    security-level 100</span><br><span class="line">    ip address 23.1.1.2 255.255.255.0 </span><br><span class="line">interface GigabitEthernet0/2</span><br><span class="line">    nameif OUTSIDE</span><br><span class="line">    security-level 0</span><br><span class="line">    ip address 12.1.1.2 255.255.255.0</span><br><span class="line">//给每个接口配置了IP地址，接口名以及安全级别。</span><br><span class="line">policy-map global_policy</span><br><span class="line">    class inspection_default</span><br><span class="line">    inspect icmp</span><br><span class="line">//为默认全局策略的默认检测类开启ICMP检测。</span><br></pre></td></tr></tbody></table></figure></li><li><p>路由器开启telnet服务</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">line vty 0 4</span><br><span class="line">    login local</span><br><span class="line">    transport input telnet</span><br><span class="line">    username name(主机名) password password(密码)</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol></li><li><p>ASA网络目标配置</p><ol><li>网络目标是一种预定义的元素。分为三种类型，分别是主机(描述一台主机)，范围(描述从某IP地址到某IP地址的一组主机)，子网(描述一个子网的所有主机)。</li><li><p>配置<br><img src="/2019/01/03/实训笔记/ASA网络目标配置.png" alt></p><ol><li><p>第一部分：按照图中所示配置所有设备的IP地址。正确配置模拟终端设备的路由器（关路由功能，设默认网关，配置IP地址并开启相应服务）。</p><ul><li>配置内网路由：在ASA和CORE之间配置动态路由协议</li><li>配置公网路由：在CORE和ASA上配置指向电信的默认路由</li><li>配置自动NAT:实现内网客户端访问公网服务器</li><li><p>防火墙接口配置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet0/0</span><br><span class="line">nameif INSIDE</span><br><span class="line">security-level 100</span><br><span class="line">ip address 10.1.23.2 255.255.255.0 </span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line">nameif OUTSIDE</span><br><span class="line">security-level 0</span><br><span class="line">ip address 12.1.1.2 255.255.255.0 </span><br><span class="line">interface GigabitEthernet0/2</span><br><span class="line">nameif DMZ</span><br><span class="line">security-level 50</span><br><span class="line">ip address 10.1.100.254 255.255.255.0</span><br></pre></td></tr></tbody></table></figure></li><li><p>防火墙动态路由配置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router rigrp 1</span><br><span class="line">network 10.1.12.2 255.255.255.255</span><br><span class="line">network 10.1.100.254 255.255.255.255</span><br><span class="line">//开启了eigrp进程1，精确宣告了两个内网接口</span><br></pre></td></tr></tbody></table></figure></li><li><p>发布防火墙静态路由配置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">route OUTSIDE 0.0.0.0 0.0.0.0 12.1.1.1</span><br><span class="line">//配置了静态的默认路由指向TELECOM</span><br></pre></td></tr></tbody></table></figure></li><li><p>防火墙自动NAT配置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">object network ITSUBNET</span><br><span class="line">subnet 10.1.1.0 255.255.255.0</span><br><span class="line">nat(INSIIDE,OUTSIDE) dynamic interface</span><br><span class="line">//配置网络目标NAT（自动NAT），注意缩进。配置从10.1.1.0/24子网发起的流量，从INSIDE接口进入防火墙，从OUTSIDE接口离开防火墙。这些流量将源IP地址转化为接口OUTSIDE的IP地址。</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>第二部分：要求DMZServer开启HTTP服务，配置自动NAT和严格ACL允许公网主机访问DMZServerHTTP服务。</p><ul><li><p>配置自动NAT</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">object network DMZSERVER1</span><br><span class="line">host 10.1.100.1</span><br><span class="line">nat(DMZ,OUTSIDE) static 12.1.1.100</span><br><span class="line">//将主机10.1.100.1进行静态NAT转换，转换后的地址为12.1.1.100</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置ACL放行OUTSIDE到DMZ的合法流量</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">access-list FORDMZSRV extended permit tcp any host   10.1.100.1 eq www</span><br><span class="line">//配置一个叫做FORDMZSRV的ACL，允许任何主机法网10.1.100.1的http流量。注意在这个位置写的IP地址和端口号是服务器的真实IP地址和端口号。</span><br><span class="line">access-group FORDMZSRV in interface OUTSIDE</span><br><span class="line">//将FORDMZSRV 调用在OUTSIDE接口的入方向上，放行公网主机访问内网服务器的首包。</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol></li><li><p>SSH(安全外壳协议):SSH和TELNET一样都可用于远程访问目标主机的CLI，SSH较安全。SSH使用TCP端口22作为目的</p></li><li><p>综合实验<br><img src="/2019/01/03/实训笔记/综合实验.png" alt></p><h5 id="实验需求：配置防火墙，实现内网主机可以访问公网的HTTP服务。公网客户端可以访问内网的DMZ服务器的HTTP和SSH服务。要求在防火墙上配置适当的自动NAT策略和严格ACL来完成这个需求。"><a href="#实验需求：配置防火墙，实现内网主机可以访问公网的HTTP服务。公网客户端可以访问内网的DMZ服务器的HTTP和SSH服务。要求在防火墙上配置适当的自动NAT策略和严格ACL来完成这个需求。" class="headerlink" title="实验需求：配置防火墙，实现内网主机可以访问公网的HTTP服务。公网客户端可以访问内网的DMZ服务器的HTTP和SSH服务。要求在防火墙上配置适当的自动NAT策略和严格ACL来完成这个需求。"></a>实验需求：配置防火墙，实现内网主机可以访问公网的HTTP服务。公网客户端可以访问内网的DMZ服务器的HTTP和SSH服务。要求在防火墙上配置适当的自动NAT策略和严格ACL来完成这个需求。</h5><ol><li>交换机配置各个VLAN以及各VLAN的SVI接口。交换机连接防火墙的接口使用RSI。</li><li>配置IP地址。（主机ping直连检查IP连通性）</li><li>配置内网路由（用EIGRP来实现。注意在ASA上连接ISP的接口不要运行EIGRP）</li><li>配置默认路由。（三层交换机和防火墙都需要默认路由来确保公网连通性）</li><li>配置ACL放行合法流量。（应用在出接口的入方向，ACL必须精确）。</li><li>配置自动NAT。（为HR和IT配置动态PAT，让他们能够访问公网，为DMZ服务器配置静态端口映射，让公网能够访问他们）。</li></ol><ul><li>实验解答</li></ul><ol><li><p>核心配置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">object network SRV1</span><br><span class="line">&nbsp;host 10.1.100.1</span><br><span class="line">object network SRV2</span><br><span class="line">&nbsp;host 10.1.100.2</span><br><span class="line">object network SRV3</span><br><span class="line">&nbsp;host 10.1.100.3</span><br><span class="line">object network IT</span><br><span class="line">&nbsp;subnet 10.1.10.0 255.255.255.0</span><br><span class="line">object network HR</span><br><span class="line">&nbsp;subnet 10.1.20.0 255.255.255.0</span><br><span class="line">object service HTTP</span><br><span class="line">&nbsp;service tcp destination eq www </span><br><span class="line">object service TELNET</span><br><span class="line">&nbsp;service tcp destination eq telnet</span><br><span class="line">object-group network SRVCluster</span><br><span class="line">&nbsp;network-object object SRV1</span><br><span class="line">&nbsp;network-object object SRV2</span><br><span class="line">&nbsp;network-object object SRV3</span><br><span class="line">object-group network SRVUser</span><br><span class="line">&nbsp;network-object object IT</span><br><span class="line">&nbsp;network-object object HR</span><br><span class="line">object-group service SRVService</span><br><span class="line">&nbsp;service-object object HTTP </span><br><span class="line">&nbsp;service-object object TELNET</span><br><span class="line">配置并调用ACL：</span><br><span class="line">access-list ININSIDE extended permit object-group SRVService object-group SRVUser object-group SRVCluster</span><br><span class="line">access-group ININSIDE in interface INSIDE</span><br></pre></td></tr></tbody></table></figure></li><li><p>ssh配置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SRV1(config)#hostname SRV1</span><br><span class="line">SRV1(config)#ip domain-name zbh.com</span><br><span class="line">//配置主机名和域名。主机名和域名对RSA密钥并无影响但RSA生成密钥需要这两个参数作为密钥标签。所以在生成RSA密钥对之前必须先配置主机名和域名。</span><br><span class="line">SRV1(config)#crypto key generate rsa modulus 1024</span><br><span class="line">//生成一个以1024为素模的RSA密钥对，模数越大，RSA密钥长度越长，强度越高</span><br><span class="line">SRV1(config)#ip ssh version 2</span><br><span class="line">//开启SSH版本2，SSH版本1的连接会被拒绝。推荐使用SSHv2</span><br><span class="line">SRV1(config)#line vty 0 4</span><br><span class="line">login local</span><br><span class="line">&nbsp;transport input ssh</span><br><span class="line">//开启vty线路，并允许在入向传输时使用SSH协议，注意这里没有包括telnet关键字，所以设备当前无法通过telnet进行远程管理。</span><br><span class="line">SRV1(config)#username zbh password cisco123</span><br><span class="line">//配置本地用户账户数据库用于对SSH远程连接进行身份认证</span><br><span class="line">HR#ssh -l zbh 10.1.100.1</span><br><span class="line">//以用户名zbh对10.1.100.1发起一个SSH远程访问。注意-l参数后面需要空格再填写用户名。</span><br></pre></td></tr></tbody></table></figure></li></ol></li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;2019年第一篇博客，我大学生涯的第一次实训，在大连诺达，学了一些思科模拟器的使用和一点网络安全基础（防火墙）-使用的是思科的eve&quot;&gt;&lt;a href=&quot;#2019年第一篇博客，我大学生涯的第一次实训，在大连诺达，学了一些思科模拟器的使用和一点网络安全基础（防火墙）-使用的是思科的eve&quot; class=&quot;headerlink&quot; title=&quot;2019年第一篇博客，我大学生涯的第一次实训，在大连诺达，学了一些思科模拟器的使用和一点网络安全基础（防火墙）,使用的是思科的eve&quot;&gt;&lt;/a&gt;2019年第一篇博客，我大学生涯的第一次实训，在大连诺达，学了一些思科模拟器的使用和一点网络安全基础（防火墙）,使用的是思科的eve&lt;/h3&gt;</summary>
    
    
    
    <category term="CCNA" scheme="http://lpower.com/categories/CCNA/"/>
    
    
    <category term="笔记" scheme="http://lpower.com/tags/笔记/"/>
    
  </entry>
  
  <entry>
    <title>tp5基础</title>
    <link href="http://lpower.com/2018/11/30/tp5%E5%9F%BA%E7%A1%80/"/>
    <id>http://lpower.com/2018/11/30/tp5%E5%9F%BA%E7%A1%80/</id>
    <published>2018-11-30T01:15:51.000Z</published>
    <updated>2021-08-03T11:33:31.702Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h3><ol><li>在c盘下Windows文件夹下的system32文件夹下drivers文件夹下的etc文件夹下的hosts文件添加一个配置<a id="more"></a><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1  www.tp5.com</span><br></pre></td></tr></tbody></table></figure></li></ol><p>如果不能修改的话，将文件复制到桌面修改，然后在粘贴回去就完事了。<br><!--more--></p><ol start="2"><li>因为我用的是wamp集成环境，所以配置要在httpd-vhosts.conf下配置：<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">ServerName www.tp5.com</span><br><span class="line">DocumentRoot "f:/wamp/www/tp5/public"</span><br><span class="line">&lt;Directory  "f:/wamp/www/tp5/public/"&gt;</span><br><span class="line">Options +Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class="line">AllowOverride All</span><br><span class="line">Require local</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><p>如果用户用的的Apache，要修改Httpd.conf<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/30/tp5基础/配置域名.png" alt="配置" title>                </div>                <div class="image-caption">配置</div>            </figure><p></p><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ol><li>目录和文件<ul><li>目录使用小写+下划线</li><li>类文件使用驼峰命名法，首字母大写，其他文件采用小写+下划线命名</li><li>类名和类文件名保持一致，统一采用驼峰法命名</li></ul></li><li>函数和类，属性命名<ul><li>类的命名采用驼峰法，首字母大写。默认不加任何后缀</li><li>函数的命名使用小写+下划线命名</li><li>方法的命名使用驼峰法，首字母小写</li><li>属性的命名使用驼峰法，首字母小写<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/30/tp5基础/目录结构.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul></li></ol><h3 id="url和路由"><a href="#url和路由" class="headerlink" title="url和路由"></a>url和路由</h3><p>路由：通过用户请求的地址，根据地址的某种规则解析，然后分发到相应的模块相应的控制器地址。</p><ol><li>访问路径大小写的注意：</li></ol><ul><li>TP5全部转换为小写</li><li>控制器首字母大写</li><li>驼峰式命名要加下划线，如果想区分大小写的话，可以在config.php里将url_convert改为false。<br>配置路由：在route.php里配置<br>URL生成<h3 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h3></li></ul><ol><li>详细内容请看tp5完全开发手册</li></ol><ul><li><a href="https://www.kancloud.cn/manual/thinkphp5/158834" target="_blank" rel="noopener">请求与响应 https://www.kancloud.cn/manual/thinkphp5/158834</a></li></ul><ol start="2"><li>页面跳转：可以直接指定路径跳转，也可以重定向跳转。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/30/tp5基础/跳转.png" alt="跳转" title>                </div>                <div class="image-caption">跳转</div>            </figure></li><li>总结一下<br><img src="/2018/11/30/tp5基础/2.png" alt="总结"><h3 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h3></li><li><p>数据库配置</p><ul><li><p>在database.php里配置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 数据库类型</span><br><span class="line">   'type'            =&gt; 'mysql',</span><br><span class="line">   // 服务器地址</span><br><span class="line">   'hostname'        =&gt; '127.0.0.1',</span><br><span class="line">   // 数据库名</span><br><span class="line">   'database'        =&gt; '你的数据库名',</span><br><span class="line">   // 用户名</span><br><span class="line">   'username'        =&gt; '你的用户名',</span><br><span class="line">   // 密码</span><br><span class="line">   'password'        =&gt; '你的密码',</span><br><span class="line">   // 端口</span><br><span class="line">   'hostport'        =&gt; '你的端口号',</span><br><span class="line">   // 连接dsn</span><br><span class="line">   'dsn'             =&gt; '',</span><br><span class="line">   // 数据库连接参数</span><br><span class="line">   'params'          =&gt; [],</span><br><span class="line">   // 数据库编码默认采用utf8</span><br><span class="line">   'charset'         =&gt; 'utf8',</span><br><span class="line">   // 数据库表前缀</span><br><span class="line">   'prefix'          =&gt; '数据库表的前缀',</span><br><span class="line">   // 数据库调试模式</span><br><span class="line">   'debug'           =&gt; true,</span><br></pre></td></tr></tbody></table></figure><p>一定要确定好自己的配置，否则会出错出到让你心态爆炸的，不要问我怎么知道的！！！！！！！！！！</p></li><li>如果要操作多数据库，只要在config.php里配置一个数组，数组里是以上的配置就好了。</li></ul></li><li>query execute 原生态SQL语句 增删改查<ul><li>查询操作用query</li><li>其他操作用execute</li></ul></li><li><p>多个数据库切换查询操作</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Db::connect('db1')-&gt;query(查询语句)</span><br><span class="line">Db::connect('db2')-&gt;query(查询语句)</span><br></pre></td></tr></tbody></table></figure></li><li><p>事务支持</p><ul><li>需要在数据库中设置表类型为InnoDB以支持事务，然后把需要执行的事务操作封装到闭包里面即可自动完成事务。用Db::transaction函数操作。</li><li>手动控制事务的提交。首先启动事务（Db::startTrans()）,然后用try，catch来提交，回滚事务（Db::rollback()）。<h3 id="模型和关联"><a href="#模型和关联" class="headerlink" title="模型和关联"></a>模型和关联</h3>模型是一种对象-关系映射的封装，并且提供了简洁的ActiveRecord实现，一般来说，每个数据表会和一个模型对应。创建一个子类，类名跟数据表名相同（需要用驼峰命名法，会自己转换），继承Model父类。在调用的时候，会自动查询主键。<h3 id="查询范围"><a href="#查询范围" class="headerlink" title="查询范围"></a>查询范围</h3></li></ul></li><li>scope + 查询范围名称  定义函数   </li><li>全局查询范围，定义之后，会自动调用</li></ol><h3 id="strstr函数"><a href="#strstr函数" class="headerlink" title="strstr函数"></a>strstr函数</h3><pre><code>搜索一个字符串在另一个字符串中的第一次出现，并返回字符串剩余的部分，对大小写敏感。<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查找 "Shanghai" 在 "I love Beijing!" 中的第一次出现，并返回字符串的剩余部分：</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">echo strstr("I love Beijing!","Beijing");</span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure></code></pre><h3 id="输入与验证"><a href="#输入与验证" class="headerlink" title="输入与验证"></a>输入与验证</h3><p>简单来说就是表单操作，然后要用validate函数来验证，实现对数据库的操作。<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/30/tp5基础/输入与验证.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p></p><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>一对一：has_one以及相对的belongs_to</p><p>多对多：has_many以及相对的belongs_to</p><p>一对多：belongs_to_many</p><h3 id="视图与模板"><a href="#视图与模板" class="headerlink" title="视图与模板"></a>视图与模板</h3><ol><li>volist标签</li></ol><ul><li>属性       <ul><li>name(必须)：要输出的数据模板变量</li><li>id(必须)：循环变量</li><li>offset（可选）：要输出数据的offset</li><li>length（可选）：输出数据的长度</li><li>key（可选）：循环的key变量，默认值为i</li><li>mod（可选）：对key值取模，默认为2</li><li>empty（可选）：如果数据为空显示的字符串</li></ul></li></ul><ol start="2"><li>公共模板</li></ol><ul><li><p>模板定位</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">'template'               =&gt; [</span><br><span class="line">        // 模板引擎类型 支持 php think 支持扩展</span><br><span class="line">        'type'         =&gt; 'Think',</span><br><span class="line">        // 默认模板渲染规则 1 解析为小写+下划线 2 全部转换小写</span><br><span class="line">        'auto_rule'    =&gt; 1,</span><br><span class="line">        // 模板路径</span><br><span class="line">        'view_path'    =&gt; '',</span><br><span class="line">        // 模板后缀</span><br><span class="line">        'view_suffix'  =&gt; 'html',</span><br><span class="line">        // 模板文件名分隔符</span><br><span class="line">        'view_depr'    =&gt; DS,</span><br><span class="line">        // 模板引擎普通标签开始标记</span><br><span class="line">        'tpl_begin'    =&gt; '{',</span><br><span class="line">        // 模板引擎普通标签结束标记</span><br><span class="line">        'tpl_end'      =&gt; '}',</span><br><span class="line">        // 标签库标签开始标记</span><br><span class="line">        'taglib_begin' =&gt; '{',</span><br><span class="line">        // 标签库标签结束标记</span><br><span class="line">        'taglib_end'   =&gt; '}',</span><br><span class="line">    ],</span><br></pre></td></tr></tbody></table></figure></li><li><p>模板布局</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">'layout_on'=&gt;true  //开启模板布局</span><br><span class="line">'layout_name'=&gt;'layout'  //使用layout文件</span><br><span class="line">'layout_item'=&gt;'{__CONTENT__}'</span><br></pre></td></tr></tbody></table></figure><p>  图片显示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/30/tp5基础/模板布局.png" alt="模板布局" title>                </div>                <div class="image-caption">模板布局</div>            </figure><h3 id="调试和日志"><a href="#调试和日志" class="headerlink" title="调试和日志"></a>调试和日志</h3></li></ul><ol><li>页面trace(官方推荐)</li></ol><ul><li><p>修改配置，启动调试</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 应用Trace</span><br><span class="line">'app_trace'              =&gt; true,</span><br><span class="line">'trace'                  =&gt; [</span><br><span class="line">    // 内置Html Console 支持扩展</span><br><span class="line">    'type' =&gt; 'Html',</span><br></pre></td></tr></tbody></table></figure><p>  在显示页面时，浏览器底部会有调试信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/30/tp5基础/trace.png" alt="trace" title>                </div>                <div class="image-caption">trace</div>            </figure><p></p></li></ul><ol start="2"><li>异常页面</li></ol><ul><li>直接报错调试，显示错误信息</li></ul><ol start="3"><li>断点调试</li></ol><ul><li>dump调试输出</li><li>halt变量调试中断并输出(打印之后就不会再打印)</li><li>trace 控制台输出</li></ul><ol start="4"><li>日志分析</li></ol><ul><li>log常规日志，用于记录日志</li><li>error错误，一般会导致程序的中止</li><li>notice 警告，程序可以运行但是不够完美的错误</li><li>info 信息，程序输出信息</li><li>debug 调试，用于调试信息</li><li>sql SQL语句，用于SQL记录，只在数据库的调试模式开启时有效</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//在runtime下的log文件</span><br><span class="line">Log::error('错误信息1');</span><br><span class="line">Log::info('日志信息2');</span><br><span class="line">trace('错误信息3'，'error');</span><br><span class="line">trace('日志信息4'，'info');</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>远程调试<h3 id="api调用（需要json返回）"><a href="#api调用（需要json返回）" class="headerlink" title="api调用（需要json返回）"></a>api调用（需要json返回）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/30/tp5基础/api.png" alt="api" title>                </div>                <div class="image-caption">api</div>            </figure></li></ol><ul><li>创建api模块</li><li>模拟提交测试（用php工具箱）<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3></li><li>如果有些函数需要全栈共用，就要在application\common.php文件中自己定义。创建的类库存放于extend目录下面，在extend\org\文件名.php，跟项目有关系的类放在application\common\文件名.php。如果没有这些文件夹，需要自己创建。</li><li>驱动扩展<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/30/tp5基础/驱动扩展.png" alt="扩展" title>                </div>                <div class="image-caption">扩展</div>            </figure><h3 id="session与cookie"><a href="#session与cookie" class="headerlink" title="session与cookie"></a>session与cookie</h3></li></ul><ol><li>session文件存放位置 </li></ol><ul><li>php.ini session.save_path</li></ul><ol start="2"><li>开启session</li></ol><ul><li>session_start</li></ul><ol start="3"><li><p>tp5里session设置config.php</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">'session'                =&gt; [</span><br><span class="line">        'id'             =&gt; '',</span><br><span class="line">        // SESSION_ID的提交变量,解决flash上传跨域</span><br><span class="line">        'var_session_id' =&gt; '',</span><br><span class="line">        // SESSION 前缀</span><br><span class="line">        'prefix'         =&gt; 'think',</span><br><span class="line">        // 驱动方式 支持redis memcache memcached</span><br><span class="line">        'type'           =&gt; '',</span><br><span class="line">        // 是否自动开启 SESSION</span><br><span class="line">        'auto_start'     =&gt; true,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    session::set() //赋值当前作用域</span><br><span class="line">    session::has() //判断</span><br><span class="line">    session::get() //取值</span><br><span class="line">    session::delete() //删除</span><br><span class="line">    session::clear() //清除session</span><br></pre></td></tr></tbody></table></figure></li><li><p>cookie</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">'cookie'                 =&gt; [</span><br><span class="line">        // cookie 名称前缀</span><br><span class="line">        'prefix'    =&gt; '',</span><br><span class="line">        // cookie 保存时间</span><br><span class="line">        'expire'    =&gt; 0,</span><br><span class="line">        // cookie 保存路径</span><br><span class="line">        'path'      =&gt; '/',</span><br><span class="line">        // cookie 有效域名</span><br><span class="line">        'domain'    =&gt; '',</span><br><span class="line">        //  cookie 启用安全传输</span><br><span class="line">        'secure'    =&gt; false,</span><br><span class="line">        // httponly设置</span><br><span class="line">        'httponly'  =&gt; '',</span><br><span class="line">        // 是否使用 setcookie</span><br><span class="line">        'setcookie' =&gt; true,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    cookie::set()  //设置cookie</span><br><span class="line">    cookie::delete() //删除</span><br><span class="line">    cookie::clear() //清除cookie</span><br></pre></td></tr></tbody></table></figure></li></ol><p>支持数组，支持使用cookie类直接读取</p><h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><p>安装composer，然后使用它安装验证码类库<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/30/tp5基础/验证码配置.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p></p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><ol><li>上传form表单的enctype属性一定要设置成multipart/form-data</li><li>校验：用validate方法校验上传的是否是需要的文件</li><li>上传<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/30/tp5基础/上传.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>md5是表示用MD5方式命名，也可改为date，即根据上传时间命名。如果想要保持上传文件的原文件名，可以将rule(‘md5’)改为$file.</li><li>多文件上传</li></ol><ul><li>将单文件上传foreach循环遍历，变为多文件上传<h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3></li></ul><ol><li>安装图像处理类库</li><li>图片读取 <code>Image::open($file)</code></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//图片裁剪(宽度，高度，x坐标，y坐标)</span><br><span class="line">$image-&gt;crop(300,300,200,200);</span><br><span class="line">//缩略图(最大宽度，最大高度，裁剪类型)</span><br><span class="line">$image-&gt;thumb(150,150,Image::THUMB_CENTER);</span><br><span class="line">//垂直翻转</span><br><span class="line">$image-&gt;flip();</span><br><span class="line">//水平翻转</span><br><span class="line">$image-&gt;flip(Image::FLIP_Y);</span><br><span class="line">//图片旋转(顺时针旋转的度数)</span><br><span class="line">$image-&gt;rotate(30);</span><br><span class="line">//图片水印</span><br><span class="line">$image-&gt;water(ROOT_PATH.'图片名',Image::WATER_NORTHWEST,50)</span><br><span class="line">//文字水印(水印文字，字体文件路径，文字大小，文字颜色，文字写入位置，偏移量，文字倾斜角度)</span><br><span class="line">$image-&gt;text();</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/30/tp5基础/缩略图裁剪.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/30/tp5基础/图片水印.png" alt title>                </div>                <div class="image-caption"></div>            </figure><ol start="3"><li>图片保存 <code>$image-&gt;save()</code><h3 id="tp5自带的方法"><a href="#tp5自带的方法" class="headerlink" title="tp5自带的方法"></a>tp5自带的方法</h3></li></ol><ul><li>分页：paginate   需要在模板中使用：{$data-&gt;render()}</li><li>tp5中url的写法</li></ul><ol><li>href=”{:url(‘admin/index’)}?Id={$data[‘Id’]}” </li><li>href=”{:url(‘index/download’,[‘Id’=&gt;$data[‘Id’]])}”</li></ol><ul><li>validate验证<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/30/tp5基础/validate验证.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="附tp5完全开发手册：https-www-kancloud-cn-manual-thinkphp5-content"><a href="#附tp5完全开发手册：https-www-kancloud-cn-manual-thinkphp5-content" class="headerlink" title="附tp5完全开发手册：https://www.kancloud.cn/manual/thinkphp5/content"></a>附tp5完全开发手册：<a href="https://www.kancloud.cn/manual/thinkphp5/content" target="_blank" rel="noopener">https://www.kancloud.cn/manual/thinkphp5/content</a></h2></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;配置域名&quot;&gt;&lt;a href=&quot;#配置域名&quot; class=&quot;headerlink&quot; title=&quot;配置域名&quot;&gt;&lt;/a&gt;配置域名&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在c盘下Windows文件夹下的system32文件夹下drivers文件夹下的etc文件夹下的hosts文件添加一个配置&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="PHP" scheme="http://lpower.com/categories/PHP/"/>
    
    
    <category term="tp5" scheme="http://lpower.com/tags/tp5/"/>
    
  </entry>
  
  <entry>
    <title>PHPmvc笔记</title>
    <link href="http://lpower.com/2018/11/25/PHPmvc%E7%AC%94%E8%AE%B0/"/>
    <id>http://lpower.com/2018/11/25/PHPmvc%E7%AC%94%E8%AE%B0/</id>
    <published>2018-11-25T11:52:23.000Z</published>
    <updated>2021-08-03T11:33:31.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="因为是在学习的中途才写的笔记，所以有一些不全，以后有时间会补全，现在主要是关于samrty语法的多。"><a href="#因为是在学习的中途才写的笔记，所以有一些不全，以后有时间会补全，现在主要是关于samrty语法的多。" class="headerlink" title="因为是在学习的中途才写的笔记，所以有一些不全，以后有时间会补全，现在主要是关于samrty语法的多。"></a>因为是在学习的中途才写的笔记，所以有一些不全，以后有时间会补全，现在主要是关于samrty语法的多。</h2><a id="more"></a><h3 id="含义：MVC是一种设计模式，它强制性的使应用程序的输入，处理和输出分开。使用MVC应用程序被分成三个核心部件：模型（Model），视图（View），控制器（Controller），他们各自处理自己的任务。"><a href="#含义：MVC是一种设计模式，它强制性的使应用程序的输入，处理和输出分开。使用MVC应用程序被分成三个核心部件：模型（Model），视图（View），控制器（Controller），他们各自处理自己的任务。" class="headerlink" title="含义：MVC是一种设计模式，它强制性的使应用程序的输入，处理和输出分开。使用MVC应用程序被分成三个核心部件：模型（Model），视图（View），控制器（Controller），他们各自处理自己的任务。"></a>含义：MVC是一种设计模式，它强制性的使应用程序的输入，处理和输出分开。使用MVC应用程序被分成三个核心部件：模型（Model），视图（View），控制器（Controller），他们各自处理自己的任务。</h3><ul><li>模型：处理数据和业务逻辑</li><li>视图：通过布局向用户展示数据</li><li>控制器：接收用户请求，并调用相应的模型处理</li></ul><ol><li>单一入口机制：指在一个web应用程序中，所有的请求都是指向一个脚本文件，所有对实用程序的访问都必须通过这个入口。</li><li>eval()函数：把字符串转换为可执行的PHP语句。</li><li>addslashes()函数：对特殊符号进行转义。</li><li>in_array()函数：判断字符串是否在数组里面</li><li>smarty语法<ul><li>配置<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    require("libs/Smarty.class.php");//引入模板</span><br><span class="line">    $smarty = new Smarty();</span><br><span class="line">    $smarty-&gt;left_delimiter = "{";  //左定界符</span><br><span class="line">    $smarty-&gt;right_delimiter = "}";  //右定界符</span><br><span class="line">    $smarty-&gt;template_dir = "tpl";  //html模板的地址</span><br><span class="line">    $smarty-&gt;compile_dir = "template_c";  //模板编译生成的文件</span><br><span class="line">    $smarty-&gt;cache_dir = "cache";  //缓存</span><br><span class="line">    $smarty-&gt;caching = false;</span><br><span class="line">``` </span><br><span class="line">* 函数</span><br><span class="line">1. assign()函数：向模板里注册变量，变量名是第一个参数，变量值是第二个参数。</span><br><span class="line">2. display()函数：展示函数，在网页里展示，参数为模板文件。</span><br><span class="line">* 编写模板：test.tpl</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol><p>{变量名}<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* 基本语法</span><br><span class="line">1. 注释 {* 这里是注释的语句 *}</span><br><span class="line">2. 常用变量调节器</span><br><span class="line">    1. 首字母大写capitalize 例：`{$test|capitalize}`</span><br><span class="line">    2. 字符串连接cat 例：`{$test|cat:"yesterday"}`</span><br><span class="line">    3. 日期格式化date_format 例： `{$yesterday|date_format}`</span><br><span class="line">    4. 为未赋值或为空的变量指定默认值default 例：`{$title|default:"no title"}`</span><br><span class="line">    5. 转换变量字符串大小写upper(转换为大写)  lower（转换为小写）： 例： `{$test|upper}    {$TEST|lower}`</span><br><span class="line">3. 条件判断语句：</span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>{if 条件}......{elseif 条件}......{else}......{/if}<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    其中条件修饰符eq相当于==，neq相当于!=，gt相当于&gt;，lt相当于&lt;。</span><br><span class="line">3. 循环语句</span><br></pre></td></tr></tbody></table></figure>{foreach item=被赋值的量 from=变量名}    .......    .......{foreachelse}{/foreach}```在smarty3里，foreach与php源生语法一致，`{foreach $test as $tt}`</code></pre><ol start="4"><li>插件<ol><li>使用registerPlugin方法注册写好的自定义函数</li><li>将写好的插件放入Smarty解压目录下lib目录下的plugins目录里</li><li>php的内置函数，可以自动以修饰插件的形式在模板里运用</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;因为是在学习的中途才写的笔记，所以有一些不全，以后有时间会补全，现在主要是关于samrty语法的多。&quot;&gt;&lt;a href=&quot;#因为是在学习的中途才写的笔记，所以有一些不全，以后有时间会补全，现在主要是关于samrty语法的多。&quot; class=&quot;headerlink&quot; title=&quot;因为是在学习的中途才写的笔记，所以有一些不全，以后有时间会补全，现在主要是关于samrty语法的多。&quot;&gt;&lt;/a&gt;因为是在学习的中途才写的笔记，所以有一些不全，以后有时间会补全，现在主要是关于samrty语法的多。&lt;/h2&gt;</summary>
    
    
    
    <category term="PHP" scheme="http://lpower.com/categories/PHP/"/>
    
    
    <category term="笔记" scheme="http://lpower.com/tags/笔记/"/>
    
  </entry>
  
  <entry>
    <title>数据结构基础</title>
    <link href="http://lpower.com/2018/11/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://lpower.com/2018/11/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2018-11-25T08:45:32.000Z</published>
    <updated>2021-08-03T11:33:31.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><a id="more"></a><ol><li><p>泛型：使数据结构可以放置除boolean,byte,char,short,int,long,float,double这八种基础数据类型以外所有数据类型，如果想放置这八种基本类型，可以用对应的包装类。 在声明类的时候，在类名后加&lt;类型&gt;。下面要实例化数组的时候，要强制转换。例如：</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Array&lt;E&gt;{</span><br><span class="line">    private E[] data;</span><br><span class="line">    public Array(int cap){</span><br><span class="line">        data = (E[]) new Object[cap];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>简单的时间复杂度分析</p><ul><li>大O 描述的是算法的运行时间和输入数据之间的关系，分析时忽略常数。</li><li>O(n)翻译过来应该是渐进时间复杂度，它描述的是当n趋于无穷的情况。</li><li>严格计算需要一些概率论知识。</li><li>均摊复杂度：将复杂度较高的算法和其他操作放在一起分析复杂度。这个复杂度较高的的算法复杂度将会均摊到其他的操作中。</li><li>复杂度震荡：存在某种情况，刚刚进行了一次数组的删除操作，缩容了一次数组，此时数组元素个数正好等于数组的容量，后面又对数组进行了一次添加操作，就会又要给数组进行一次扩容，这样整个算法的复杂度就会上升，这就是所谓的复杂度震荡。</li><li>解决复杂度震荡：推迟数组的缩容操作。当某个元素等于数组容量的1/4时，在进行缩容，缩容为当前数组容量的1/2.这样就可以很好地解决复杂度震荡问题。</li></ul></li></ol><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ol><li>栈是一种线性结构，是数组的子集，只能从一端添加元素，也只能从一端取出元素，这一端称为栈顶。</li><li>栈是一种后进先出的数据结构（LIFO），撤销操作就是典型的栈的操作。</li><li>基本操作 <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;E&gt; //泛型</span><br><span class="line">void push(E)//入栈</span><br><span class="line">E pop() //出栈</span><br><span class="line">E peek() //栈顶元素（E top()）</span><br><span class="line">int getSize() //共有几个元素</span><br><span class="line">boolean isEmpty() //判断是否为空</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ol><li>队列也是一种线性结构，是数组的子集，只能从一端（队尾）添加元素，只能从另一端（队首）取出元素</li><li>队列是一种先进先出的数据结构（先到先得），First in First Out(FIFO)</li><li><p>基本操作</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;E&gt; //泛型</span><br><span class="line">void enqueue(E)//入队</span><br><span class="line">E dequeue() //出队</span><br><span class="line">E getFront() //队首元素</span><br><span class="line">int getSize() //共有几个元素</span><br><span class="line">boolean isEmpty() //判断是否为空</span><br></pre></td></tr></tbody></table></figure></li><li><p>循环队列：front==tail 队列为空，当填入一个元素时，tail++，直至(tail+1) % c==front时，队列满，就可以扩容队列了。这样，队列是有意识的浪费一个空间</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/25/数据结构/1.png" alt="数据结构" title>                </div>                <div class="image-caption">数据结构</div>            </figure><p>循环队列比数组快很多，容量越大，区别越大。</p><h3 id="链表-gt-真正的动态数据结构"><a href="#链表-gt-真正的动态数据结构" class="headerlink" title="链表 ->真正的动态数据结构"></a>链表 -&gt;真正的动态数据结构</h3></li><li>链表是最简单的动态数组结构，对递归和指针可以更深入的理解</li><li>数据存储在节点（Node）中，是真正的动态，不需要处理固定容量的问题，但是丧失了随机访问的能力</li><li>在执行链表代码时，顺序很重要，不能前后顺序颠倒。</li><li>在链表头增加数据时，为链表设立虚拟头结点（dummyHead）。</li><li>在删除链表时，要先找到待删除的节点的上一个节点，让这个节点指向待删除的节点的下一个节点。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/25/数据结构/2.png" alt="链表" title>                </div>                <div class="image-caption">链表</div>            </figure></li><li>可以用链表实现栈和队列。<h3 id="链表与递归"><a href="#链表与递归" class="headerlink" title="链表与递归"></a>链表与递归</h3><ol><li>递归本质上就是将原来的问题转化为更小的同一问题。</li><li>数组求和问题：实际上就是从第一个加到最后一个，然后一个一个将数取出来，最后只剩最后一个数加上一个空数组，实现如下：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/25/数据结构/递归.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>递归算法。<ul><li>求解最基本问题</li><li>把原问题转化为更小的问题</li></ul></li></ol></li><li>链表具有天然递归结构性质  </li><li>递归调用是有代价的：函数调用+系统栈空间</li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h3&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://lpower.com/categories/数据结构/"/>
    
    
    <category term="笔记" scheme="http://lpower.com/tags/笔记/"/>
    
  </entry>
  
  <entry>
    <title>wamp下基础sql语句</title>
    <link href="http://lpower.com/2018/11/22/wamp%E4%B8%8B%E5%9F%BA%E7%A1%80sql%E8%AF%AD%E5%8F%A5/"/>
    <id>http://lpower.com/2018/11/22/wamp%E4%B8%8B%E5%9F%BA%E7%A1%80sql%E8%AF%AD%E5%8F%A5/</id>
    <published>2018-11-22T10:47:07.000Z</published>
    <updated>2021-08-03T11:33:31.638Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="实验环境：wamp-SQL控制台"><a href="#实验环境：wamp-SQL控制台" class="headerlink" title="实验环境：wamp-SQL控制台"></a>实验环境：wamp-SQL控制台</h4><a id="more"></a><ol><li>设置MySQL的密码</li><li>默认密码为空，直接回车登录</li><li>use mysql;</li><li><p>修改密码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set authentication_string = PASSWORD('你自己的密码') where user='root';</span><br></pre></td></tr></tbody></table></figure></li><li><p>使设定立即生效</p></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>exit 退出；</li></ol><h3 id="基础语句"><a href="#基础语句" class="headerlink" title="基础语句"></a>基础语句</h3><ol><li>登陆wamp；</li><li>查看基本配置<ul><li>查询服务器版本 select version（）</li><li>查询用户权限  select user（） </li><li>查询当前所在的库 select database（）</li></ul></li><li>显示数据库列表  show databases</li><li>建库  create database user</li><li><p>建表  use user </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table （id int username varchar(20)password varchar(20）</span><br></pre></td></tr></tbody></table></figure></li><li><p>往表中加入记录</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into admin values(1,'admin','hhh')</span><br></pre></td></tr></tbody></table></figure></li><li><p>显示表的字段信息  desc 表名</p></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc admin;</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| id       | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| username | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| password | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+----------+-------------+------+-----</span><br></pre></td></tr></tbody></table></figure><ol start="8"><li>查询操作</li></ol><ul><li>查询admin中所有数据   select * from 表名;</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from admin;</span><br><span class="line">+------+----------+----------+</span><br><span class="line">| id   | username | password |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">|    1 | admin    | hhh      |</span><br><span class="line">|    1 | user     | dida     |</span><br><span class="line">|    1 | hack     | zzz      |</span><br><span class="line">|    2 | use      | ida      |</span><br><span class="line">|    3 | hak      | zz       |</span><br><span class="line">+------+----------+----------+</span><br></pre></td></tr></tbody></table></figure><p>（因为手残所以多加了两个id=1的  以后忽略）</p><ul><li>查询admin中id=2的信息<br>select * from 表名 where id =2</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from admin where id =2;</span><br><span class="line">+------+----------+----------+</span><br><span class="line">| id   | username | password |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">|    2 | use      | ida      |</span><br><span class="line">+------+----------+----------+</span><br></pre></td></tr></tbody></table></figure><ul><li>查询admin中id=2的用户名和密码<br>select username,password from admin where id =2;</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select username,password from admin where id =2;</span><br><span class="line">+----------+----------+</span><br><span class="line">| username | password |</span><br><span class="line">+----------+----------+</span><br><span class="line">| use      | ida      |</span><br><span class="line">+----------+----------+</span><br></pre></td></tr></tbody></table></figure><ol start="9"><li>判断其他表是否存在</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from admin where id=‘1’and exists(select * from task）</span><br></pre></td></tr></tbody></table></figure><p>如果不存在 会出现Table ‘user.task’ doesn’t exist</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> mysql&gt; select * from admin where id='2'and exists(select * from task );</span><br><span class="line">ERROR 1146 (42S02): Table 'user.task' doesn't exist</span><br></pre></td></tr></tbody></table></figure><h4 id="一些不常用的"><a href="#一些不常用的" class="headerlink" title="一些不常用的"></a>一些不常用的</h4><ul><li>@@version_compile_os显示服务器系统</li><li>@@basedir   显示MySQL的安装路径</li><li>@@datadir   显示MySQL数据库文件的路径</li></ul><ol><li>order by n  查字段与排序<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from admin  order by 4;</span><br><span class="line">ERROR 1054 (42S22): Unknown column '4' in 'order clause'</span><br><span class="line">mysql&gt; select * from admin  order by 3;</span><br><span class="line">+------+----------+----------+</span><br><span class="line">| id   | username | password |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">|    1 | user     | dida     |</span><br><span class="line">|    1 | admin    | hhh      |</span><br><span class="line">|    2 | use      | ida      |</span><br><span class="line">|    3 | hak      | zz       |</span><br><span class="line">|    1 | hack     | zzz      |</span><br><span class="line">+------+----------+--</span><br></pre></td></tr></tbody></table></figure></li></ol><p>联合查询：前后字段必须一致。</p><ol start="2"><li>告诉服务器你的字符集</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;set names gbk/utf-8</span><br></pre></td></tr></tbody></table></figure><ol start="10"><li>快速清空表<br>truncate 表名</li><li>distinct 在结果中去除重复行</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select distinct name from aaa;</span><br></pre></td></tr></tbody></table></figure><ol start="12"><li>order by 对结果排序</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from hhh order by id;</span><br></pre></td></tr></tbody></table></figure><ol start="13"><li>修改数据表记录</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update hhh set age='15' where id='3';</span><br></pre></td></tr></tbody></table></figure><ol start="14"><li>concat联合多列</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select id,concat(name,":",age) from hhh;</span><br></pre></td></tr></tbody></table></figure><ol start="15"><li>修改字符编码</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table users modify username char(20) character set gbk;</span><br></pre></td></tr></tbody></table></figure><ol start="16"><li>建立索引</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create unique index &lt;索引名&gt; on &lt;表名&gt; &lt;列名&gt;</span><br></pre></td></tr></tbody></table></figure><!--more-->]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h3&gt;&lt;h4 id=&quot;实验环境：wamp-SQL控制台&quot;&gt;&lt;a href=&quot;#实验环境：wamp-SQL控制台&quot; class=&quot;headerlink&quot; title=&quot;实验环境：wamp-SQL控制台&quot;&gt;&lt;/a&gt;实验环境：wamp-SQL控制台&lt;/h4&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://lpower.com/categories/MySQL/"/>
    
    
    <category term="sql语句" scheme="http://lpower.com/tags/sql语句/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客上传图片</title>
    <link href="http://lpower.com/2018/11/22/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
    <id>http://lpower.com/2018/11/22/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</id>
    <published>2018-11-22T04:38:39.000Z</published>
    <updated>2021-08-03T11:33:31.626Z</updated>
    
    <content type="html"><![CDATA[<h4 id="今天想写博客，突然发现要用到图片，然而自己却不会上传，于是就拜托了谷歌大神。一开始下载了插件之后，发现不好用，于是用了七牛云。七牛云很麻烦，还要实名认证。所以我还是决定用插件来操作。话不多说，看操作。"><a href="#今天想写博客，突然发现要用到图片，然而自己却不会上传，于是就拜托了谷歌大神。一开始下载了插件之后，发现不好用，于是用了七牛云。七牛云很麻烦，还要实名认证。所以我还是决定用插件来操作。话不多说，看操作。" class="headerlink" title="今天想写博客，突然发现要用到图片，然而自己却不会上传，于是就拜托了谷歌大神。一开始下载了插件之后，发现不好用，于是用了七牛云。七牛云很麻烦，还要实名认证。所以我还是决定用插件来操作。话不多说，看操作。"></a>今天想写博客，突然发现要用到图片，然而自己却不会上传，于是就拜托了谷歌大神。一开始下载了插件之后，发现不好用，于是用了七牛云。七牛云很麻烦，还要实名认证。所以我还是决定用插件来操作。话不多说，看操作。</h4><h4 id="1-首先把hexo下的-config-yml下的post-asset-folder改为true"><a href="#1-首先把hexo下的-config-yml下的post-asset-folder改为true" class="headerlink" title="1.首先把hexo下的_config.yml下的post_asset_folder改为true"></a>1.首先把hexo下的_config.yml下的post_asset_folder改为true</h4><h4 id="2-在hexo目录下git-bash-here"><a href="#2-在hexo目录下git-bash-here" class="headerlink" title="2.在hexo目录下git bash here"></a>2.在hexo目录下git bash here</h4><a id="more"></a><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></tbody></table></figure><h4 id="3-之后你再hexo-n-“博客名”生成md博客时，在-post目录下会生成一个与博客名相同的文件夹。"><a href="#3-之后你再hexo-n-“博客名”生成md博客时，在-post目录下会生成一个与博客名相同的文件夹。" class="headerlink" title="3.之后你再hexo n “博客名”生成md博客时，在_post目录下会生成一个与博客名相同的文件夹。"></a>3.之后你再hexo n “博客名”生成md博客时，在_post目录下会生成一个与博客名相同的文件夹。</h4><h4 id="4-将想要上传的图片放到文件夹下，用markdown插入图片："><a href="#4-将想要上传的图片放到文件夹下，用markdown插入图片：" class="headerlink" title="4.将想要上传的图片放到文件夹下，用markdown插入图片："></a>4.将想要上传的图片放到文件夹下，用markdown插入图片：</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![想输入的文字](文件夹名/图片名.jpg)</span><br></pre></td></tr></tbody></table></figure><h4 id="5-用hexo上传博客。"><a href="#5-用hexo上传博客。" class="headerlink" title="5.用hexo上传博客。"></a>5.用hexo上传博客。</h4><h5 id="一波小小的福利"><a href="#一波小小的福利" class="headerlink" title="一波小小的福利"></a>一波小小的福利</h5> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/11/22/hexo博客上传图片/test.jpg" alt="福利" title>                </div>                <div class="image-caption">福利</div>            </figure><!--more-->]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;今天想写博客，突然发现要用到图片，然而自己却不会上传，于是就拜托了谷歌大神。一开始下载了插件之后，发现不好用，于是用了七牛云。七牛云很麻烦，还要实名认证。所以我还是决定用插件来操作。话不多说，看操作。&quot;&gt;&lt;a href=&quot;#今天想写博客，突然发现要用到图片，然而自己却不会上传，于是就拜托了谷歌大神。一开始下载了插件之后，发现不好用，于是用了七牛云。七牛云很麻烦，还要实名认证。所以我还是决定用插件来操作。话不多说，看操作。&quot; class=&quot;headerlink&quot; title=&quot;今天想写博客，突然发现要用到图片，然而自己却不会上传，于是就拜托了谷歌大神。一开始下载了插件之后，发现不好用，于是用了七牛云。七牛云很麻烦，还要实名认证。所以我还是决定用插件来操作。话不多说，看操作。&quot;&gt;&lt;/a&gt;今天想写博客，突然发现要用到图片，然而自己却不会上传，于是就拜托了谷歌大神。一开始下载了插件之后，发现不好用，于是用了七牛云。七牛云很麻烦，还要实名认证。所以我还是决定用插件来操作。话不多说，看操作。&lt;/h4&gt;&lt;h4 id=&quot;1-首先把hexo下的-config-yml下的post-asset-folder改为true&quot;&gt;&lt;a href=&quot;#1-首先把hexo下的-config-yml下的post-asset-folder改为true&quot; class=&quot;headerlink&quot; title=&quot;1.首先把hexo下的_config.yml下的post_asset_folder改为true&quot;&gt;&lt;/a&gt;1.首先把hexo下的_config.yml下的post_asset_folder改为true&lt;/h4&gt;&lt;h4 id=&quot;2-在hexo目录下git-bash-here&quot;&gt;&lt;a href=&quot;#2-在hexo目录下git-bash-here&quot; class=&quot;headerlink&quot; title=&quot;2.在hexo目录下git bash here&quot;&gt;&lt;/a&gt;2.在hexo目录下git bash here&lt;/h4&gt;</summary>
    
    
    
    <category term="博客" scheme="http://lpower.com/categories/博客/"/>
    
    
    <category term="hexo" scheme="http://lpower.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>mysql8.0的安装</title>
    <link href="http://lpower.com/2018/10/02/mysql8-0%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://lpower.com/2018/10/02/mysql8-0%E7%9A%84%E5%AE%89%E8%A3%85/</id>
    <published>2018-10-02T06:43:26.000Z</published>
    <updated>2021-08-03T11:33:31.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Windows下MySQL安装"><a href="#Windows下MySQL安装" class="headerlink" title="Windows下MySQL安装"></a>Windows下MySQL安装</h3><h2 id="今天闲来无事，就脑残的想安装个MySQL玩玩，结果遇到了各种各样的麻烦，搞得心态差点炸了，还好最后安装完了。"><a href="#今天闲来无事，就脑残的想安装个MySQL玩玩，结果遇到了各种各样的麻烦，搞得心态差点炸了，还好最后安装完了。" class="headerlink" title="今天闲来无事，就脑残的想安装个MySQL玩玩，结果遇到了各种各样的麻烦，搞得心态差点炸了，还好最后安装完了。"></a>今天闲来无事，就脑残的想安装个MySQL玩玩，结果遇到了各种各样的麻烦，搞得心态差点炸了，还好最后安装完了。</h2><h2 id="1-官网下载社区版MySQL（zip包），然后解压。"><a href="#1-官网下载社区版MySQL（zip包），然后解压。" class="headerlink" title="1.官网下载社区版MySQL（zip包），然后解压。"></a>1.官网下载社区版MySQL（zip包），然后解压。</h2><h2 id="2-配置环境变量。"><a href="#2-配置环境变量。" class="headerlink" title="2.配置环境变量。"></a>2.配置环境变量。</h2><a id="more"></a><p>我的电脑-&gt;右键-&gt;高级系统设置-&gt;环境变量，在系统变量的path后添加解压后的MySQL文件夹里的bin目录的路径</p><h2 id="3-添加配置文件"><a href="#3-添加配置文件" class="headerlink" title="3.添加配置文件"></a>3.添加配置文件</h2><p>在MySQL文件夹下创建my.ini文件<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port = 3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=C:\web\mysql-8.0.11</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=C:\web\sqldata</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=20</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="4-以管理员身份运行cmd（在搜索框敲cmd，右键，以管理员身份运行）"><a href="#4-以管理员身份运行cmd（在搜索框敲cmd，右键，以管理员身份运行）" class="headerlink" title="4.以管理员身份运行cmd（在搜索框敲cmd，右键，以管理员身份运行）"></a>4.以管理员身份运行cmd（在搜索框敲cmd，右键，以管理员身份运行）</h2><p>这里一定一定要用管理员身份运行cmd，不然在后续步骤时会报错<br>进入cmd后切到bin目录下，初始化数据库<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></tbody></table></figure><p></p><p>待执行完成后，会出现root的初始密码<br>root@localhost后面的字符串就是密码<br>记住密码，保存下来，之后第一次登陆时会用到。</p><h2 id="5-安装mysqld"><a href="#5-安装mysqld" class="headerlink" title="5.安装mysqld"></a>5.安装mysqld</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld -install</span><br></pre></td></tr></tbody></table></figure><h2 id="6-启动MySQL"><a href="#6-启动MySQL" class="headerlink" title="6.启动MySQL"></a>6.启动MySQL</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></tbody></table></figure><p>这里就是上文提到的如果不是管理员身份运行，会提示安装失败。</p><h2 id="7-上述步骤完成后，就不需要管理员权限了，直接cmd"><a href="#7-上述步骤完成后，就不需要管理员权限了，直接cmd" class="headerlink" title="7.上述步骤完成后，就不需要管理员权限了，直接cmd"></a>7.上述步骤完成后，就不需要管理员权限了，直接cmd</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></tbody></table></figure><p>回车后会提示输入密码，把刚才保存的输入密码输入之后就可以登录了</p><h2 id="8-修改密码"><a href="#8-修改密码" class="headerlink" title="8.修改密码"></a>8.修改密码</h2><p>因为初始密码过于难记，所以大部分人都需要重置密码，重置密码有很多种方法，我试了很多，只有下面这条能用<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user 'root'@'localhost' identified by '你的密码';</span><br></pre></td></tr></tbody></table></figure><p></p><p>其他的都会报错，这里一定要有耐心，因为我不知道试了多少语句。</p><h2 id="9-刷新，使修改生效"><a href="#9-刷新，使修改生效" class="headerlink" title="9.刷新，使修改生效"></a>9.刷新，使修改生效</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure><h2 id="10-退出，重新登陆MySQL"><a href="#10-退出，重新登陆MySQL" class="headerlink" title="10.退出，重新登陆MySQL"></a>10.退出，重新登陆MySQL</h2><p>退出mysql<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></tbody></table></figure><p></p><p>重新登陆MySQL<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后输入你修改后的密码，发现能够登陆，MySQL安装完成</p><h1 id="附：mysql的导入导出"><a href="#附：mysql的导入导出" class="headerlink" title="附：mysql的导入导出"></a>附：mysql的导入导出</h1><h2 id="1-导入："><a href="#1-导入：" class="headerlink" title="1.导入："></a>1.导入：</h2><ul><li>运行cmd</li><li>mysql -u 用户名 -p 密码</li><li>source 数据库名 &lt; 要导入的文件名.sql<h2 id="2-导出："><a href="#2-导出：" class="headerlink" title="2.导出："></a>2.导出：</h2></li><li>到MySQL的bin目录下，运行cmd</li><li>输入 mysqldump 数据库名 &gt; 文件名.sql。如果要指定路径，例如如果想放到C盘下，可以直接 mysqldump 数据库名 &gt;  c:\文件名.sql<h2 id="当然还有一种更简单的方法，就是直接用图形化界面，直接导出。"><a href="#当然还有一种更简单的方法，就是直接用图形化界面，直接导出。" class="headerlink" title="当然还有一种更简单的方法，就是直接用图形化界面，直接导出。"></a>当然还有一种更简单的方法，就是直接用图形化界面，直接导出。</h2><!--more--></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Windows下MySQL安装&quot;&gt;&lt;a href=&quot;#Windows下MySQL安装&quot; class=&quot;headerlink&quot; title=&quot;Windows下MySQL安装&quot;&gt;&lt;/a&gt;Windows下MySQL安装&lt;/h3&gt;&lt;h2 id=&quot;今天闲来无事，就脑残的想安装个MySQL玩玩，结果遇到了各种各样的麻烦，搞得心态差点炸了，还好最后安装完了。&quot;&gt;&lt;a href=&quot;#今天闲来无事，就脑残的想安装个MySQL玩玩，结果遇到了各种各样的麻烦，搞得心态差点炸了，还好最后安装完了。&quot; class=&quot;headerlink&quot; title=&quot;今天闲来无事，就脑残的想安装个MySQL玩玩，结果遇到了各种各样的麻烦，搞得心态差点炸了，还好最后安装完了。&quot;&gt;&lt;/a&gt;今天闲来无事，就脑残的想安装个MySQL玩玩，结果遇到了各种各样的麻烦，搞得心态差点炸了，还好最后安装完了。&lt;/h2&gt;&lt;h2 id=&quot;1-官网下载社区版MySQL（zip包），然后解压。&quot;&gt;&lt;a href=&quot;#1-官网下载社区版MySQL（zip包），然后解压。&quot; class=&quot;headerlink&quot; title=&quot;1.官网下载社区版MySQL（zip包），然后解压。&quot;&gt;&lt;/a&gt;1.官网下载社区版MySQL（zip包），然后解压。&lt;/h2&gt;&lt;h2 id=&quot;2-配置环境变量。&quot;&gt;&lt;a href=&quot;#2-配置环境变量。&quot; class=&quot;headerlink&quot; title=&quot;2.配置环境变量。&quot;&gt;&lt;/a&gt;2.配置环境变量。&lt;/h2&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://lpower.com/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://lpower.com/tags/MySQL/"/>
    
  </entry>
  
</feed>
